{"ast":null,"code":"\"use strict\";\n\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeMiddleware = exports.REQUEST_LOG_SUFFIX = void 0;\nconst logging_1 = require(\"@google-cloud/logging\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst common_1 = require(\"../common\");\nconst index_1 = require(\"../index\");\nconst make_child_logger_1 = require(\"./make-child-logger\");\nexports.REQUEST_LOG_SUFFIX = '_reqlog';\nasync function makeMiddleware(logger, optionsOrTransport) {\n  let transport;\n  // If no custom transports are provided, use default or instantiate one.\n  const cloudTransport = logger.transports.find(t => t instanceof index_1.LoggingWinston);\n  // If user provides a custom transport, always add it to the logger.\n  if (optionsOrTransport instanceof index_1.LoggingWinston) {\n    transport = optionsOrTransport;\n    logger.add(transport);\n  } else if (cloudTransport && !optionsOrTransport) {\n    // Check if logger already contains a Cloud transport\n    transport = cloudTransport;\n  } else {\n    const options = {\n      logName: 'winston_log',\n      ...optionsOrTransport\n    };\n    transport = new index_1.LoggingWinston(options);\n    logger.add(transport);\n  }\n  const auth = (transport.common.redirectToStdout ? transport.common.cloudLog : transport.common.cloudLog).logging.auth;\n  const [env, projectId] = await Promise.all([auth.getEnv(), auth.getProjectId()]);\n  // Unless we are running on Google App Engine or Cloud Functions, generate a\n  // parent request log entry that all the request specific logs (\"app logs\")\n  // will nest under. GAE and GCF generate the parent request logs\n  // automatically.\n  let emitRequestLogEntry;\n  if (env !== google_auth_library_1.GCPEnv.APP_ENGINE && env !== google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS) {\n    const requestLogName = logging_1.Log.formatName_(projectId, `${transport.common.logName}${exports.REQUEST_LOG_SUFFIX}`);\n    emitRequestLogEntry = (httpRequest, trace, span, sampled) => {\n      logger.info({\n        // The request logs must have a log name distinct from the app logs\n        // for log correlation to work.\n        logName: requestLogName,\n        [common_1.LOGGING_TRACE_KEY]: trace,\n        [common_1.LOGGING_SPAN_KEY]: span,\n        [common_1.LOGGING_SAMPLED_KEY]: sampled,\n        httpRequest,\n        message: httpRequest.requestUrl || 'http request'\n      });\n    };\n  }\n  return logging_1.middleware.express.makeMiddleware(projectId, (trace, span, sampled) => make_child_logger_1.makeChildLogger(logger, trace, span, sampled), emitRequestLogEntry);\n}\nexports.makeMiddleware = makeMiddleware;","map":{"version":3,"names":["Object","defineProperty","exports","value","makeMiddleware","REQUEST_LOG_SUFFIX","logging_1","require","google_auth_library_1","common_1","index_1","make_child_logger_1","logger","optionsOrTransport","transport","cloudTransport","transports","find","t","LoggingWinston","add","options","logName","auth","common","redirectToStdout","cloudLog","logging","env","projectId","Promise","all","getEnv","getProjectId","emitRequestLogEntry","GCPEnv","APP_ENGINE","CLOUD_FUNCTIONS","requestLogName","Log","formatName_","httpRequest","trace","span","sampled","info","LOGGING_TRACE_KEY","LOGGING_SPAN_KEY","LOGGING_SAMPLED_KEY","message","requestUrl","middleware","express","makeChildLogger"],"sources":["/Users/rhysgregory/node_modules/@google-cloud/logging-winston/build/src/middleware/express.js"],"sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeMiddleware = exports.REQUEST_LOG_SUFFIX = void 0;\nconst logging_1 = require(\"@google-cloud/logging\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst common_1 = require(\"../common\");\nconst index_1 = require(\"../index\");\nconst make_child_logger_1 = require(\"./make-child-logger\");\nexports.REQUEST_LOG_SUFFIX = '_reqlog';\nasync function makeMiddleware(logger, optionsOrTransport) {\n    let transport;\n    // If no custom transports are provided, use default or instantiate one.\n    const cloudTransport = logger.transports.find(t => t instanceof index_1.LoggingWinston);\n    // If user provides a custom transport, always add it to the logger.\n    if (optionsOrTransport instanceof index_1.LoggingWinston) {\n        transport = optionsOrTransport;\n        logger.add(transport);\n    }\n    else if (cloudTransport && !optionsOrTransport) {\n        // Check if logger already contains a Cloud transport\n        transport = cloudTransport;\n    }\n    else {\n        const options = { logName: 'winston_log', ...optionsOrTransport };\n        transport = new index_1.LoggingWinston(options);\n        logger.add(transport);\n    }\n    const auth = (transport.common.redirectToStdout\n        ? transport.common.cloudLog\n        : transport.common.cloudLog).logging.auth;\n    const [env, projectId] = await Promise.all([\n        auth.getEnv(),\n        auth.getProjectId(),\n    ]);\n    // Unless we are running on Google App Engine or Cloud Functions, generate a\n    // parent request log entry that all the request specific logs (\"app logs\")\n    // will nest under. GAE and GCF generate the parent request logs\n    // automatically.\n    let emitRequestLogEntry;\n    if (env !== google_auth_library_1.GCPEnv.APP_ENGINE && env !== google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS) {\n        const requestLogName = logging_1.Log.formatName_(projectId, `${transport.common.logName}${exports.REQUEST_LOG_SUFFIX}`);\n        emitRequestLogEntry = (httpRequest, trace, span, sampled) => {\n            logger.info({\n                // The request logs must have a log name distinct from the app logs\n                // for log correlation to work.\n                logName: requestLogName,\n                [common_1.LOGGING_TRACE_KEY]: trace,\n                [common_1.LOGGING_SPAN_KEY]: span,\n                [common_1.LOGGING_SAMPLED_KEY]: sampled,\n                httpRequest,\n                message: httpRequest.requestUrl || 'http request',\n            });\n        };\n    }\n    return logging_1.middleware.express.makeMiddleware(projectId, (trace, span, sampled) => make_child_logger_1.makeChildLogger(logger, trace, span, sampled), emitRequestLogEntry);\n}\nexports.makeMiddleware = makeMiddleware;\n//# sourceMappingURL=express.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}