{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetInstrumentationStatus = exports.getNodejsLibraryVersion = exports.createDiagnosticEntry = exports.populateInstrumentationInfo = exports.getInstrumentationInfoStatus = exports.NODEJS_LIBRARY_NAME_PREFIX = exports.INSTRUMENTATION_SOURCE_KEY = exports.DIAGNOSTIC_INFO_KEY = void 0;\nconst arrify = require(\"arrify\");\nconst path = require(\"path\");\nconst protos_1 = require(\"../../protos/protos\");\nconst entry_1 = require(\"../entry\");\n// The global variable keeping track if instrumentation record was already written or not.\n// The instrumentation record should be generated only once per process and contain logging\n// libraries related info.\nglobal.instrumentationAdded = false;\n// The variable to hold cached library version\nlet libraryVersion;\n// Max length for instrumentation library name and version values\nconst maxDiagnosticValueLen = 14;\nexports.DIAGNOSTIC_INFO_KEY = 'logging.googleapis.com/diagnostic';\nexports.INSTRUMENTATION_SOURCE_KEY = 'instrumentation_source';\nexports.NODEJS_LIBRARY_NAME_PREFIX = 'nodejs';\n/**\n * This method returns the status if instrumentation info was already added or not.\n * @returns true if the log record with instrumentation info was already added, false otherwise.\n */\nfunction getInstrumentationInfoStatus() {\n  return global.instrumentationAdded;\n}\nexports.getInstrumentationInfoStatus = getInstrumentationInfoStatus;\n/**\n * This method helps to populate entries with instrumentation data\n * @param entry {Entry} The entry or array of entries to be populated with instrumentation info\n * @returns {Entry} Array of entries which contains an entry with current library instrumentation info\n */\nfunction populateInstrumentationInfo(entry) {\n  var _a, _b;\n  // Update the flag indicating that instrumentation entry was already added once,\n  // so any subsequent calls to this method will not add a separate instrumentation log entry\n  let isWritten = global.instrumentationAdded;\n  global.instrumentationAdded = true;\n  const entries = [];\n  if (entry) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    for (const entryItem of arrify(entry)) {\n      if (entryItem) {\n        const info = (_b = (_a = entryItem.data) === null || _a === void 0 ? void 0 : _a[exports.DIAGNOSTIC_INFO_KEY]) === null || _b === void 0 ? void 0 : _b[exports.INSTRUMENTATION_SOURCE_KEY];\n        if (info) {\n          // Validate and update the instrumentation info with current library info\n          entryItem.data[exports.DIAGNOSTIC_INFO_KEY][exports.INSTRUMENTATION_SOURCE_KEY] = validateAndUpdateInstrumentation(info);\n          // Indicate that instrumentation info log entry already exists\n          // and that current library info was added to existing log entry\n          isWritten = true;\n        }\n        entries.push(entryItem);\n      }\n    }\n  }\n  // If no instrumentation info was added before, append a separate log entry with\n  // instrumentation data for this library\n  if (!isWritten) {\n    entries.push(createDiagnosticEntry(undefined, undefined));\n  }\n  return entries;\n}\nexports.populateInstrumentationInfo = populateInstrumentationInfo;\n/**\n * The helper method to generate a log entry with diagnostic instrumentation data.\n * @param libraryName {string} The name of the logging library to be reported. Should be prefixed with 'nodejs'.\n *        Will be truncated if longer than 14 characters.\n * @param libraryVersion {string} The version of the logging library to be reported. Will be truncated if longer than 14 characters.\n * @returns {Entry} The entry with diagnostic instrumentation data.\n */\nfunction createDiagnosticEntry(libraryName, libraryVersion) {\n  // Validate the libraryName first and make sure it starts with 'nodejs' prefix.\n  if (!libraryName || !libraryName.startsWith(exports.NODEJS_LIBRARY_NAME_PREFIX)) {\n    libraryName = exports.NODEJS_LIBRARY_NAME_PREFIX;\n  }\n  const entry = new entry_1.Entry({\n    severity: protos_1.google.logging.type.LogSeverity.INFO\n  }, {\n    [exports.DIAGNOSTIC_INFO_KEY]: {\n      [exports.INSTRUMENTATION_SOURCE_KEY]: [{\n        // Truncate libraryName and libraryVersion if more than 14 characters length\n        name: truncateValue(libraryName, maxDiagnosticValueLen),\n        version: truncateValue(libraryVersion !== null && libraryVersion !== void 0 ? libraryVersion : getNodejsLibraryVersion(), maxDiagnosticValueLen)\n      }]\n    }\n  });\n  return entry;\n}\nexports.createDiagnosticEntry = createDiagnosticEntry;\n/**\n * This method validates that provided instrumentation info list is valid and also adds current library info to a list.\n * @param infoList {InstrumentationInfo} The array of InstrumentationInfo to be validated and updated.\n * @returns {InstrumentationInfo} The updated list of InstrumentationInfo.\n */\nfunction validateAndUpdateInstrumentation(infoList) {\n  const finalInfo = [];\n  // First, add current library information\n  finalInfo.push({\n    name: exports.NODEJS_LIBRARY_NAME_PREFIX,\n    version: getNodejsLibraryVersion()\n  });\n  // Iterate through given list of libraries and for each entry perform validations and transformations\n  // Limit amount of entries to be up to 3\n  let count = 1;\n  for (const info of infoList) {\n    if (isValidInfo(info)) {\n      finalInfo.push({\n        name: truncateValue(info.name, maxDiagnosticValueLen),\n        version: truncateValue(info.version, maxDiagnosticValueLen)\n      });\n    }\n    if (++count === 3) break;\n  }\n  return finalInfo;\n}\n/**\n * A helper function to truncate a value (library name or version for example). The value is truncated\n * when it is longer than {maxLen} chars and '*' is added instead of truncated suffix.\n * @param value {string} The value to be truncated.\n * @param maxLen {number} The max length to be used for truncation.\n * @returns {string} The truncated value.\n */\nfunction truncateValue(value, maxLen) {\n  if (value && value.length > maxLen) {\n    return value.substring(0, maxLen).concat('*');\n  }\n  return value;\n}\n/**\n * The helper function to retrieve current library version from 'package.json' file. Note that\n * since we use {path.resolve}, the search for 'package.json' could be impacted by current working directory.\n * @returns {string} A current library version.\n */\nfunction getNodejsLibraryVersion() {\n  if (libraryVersion) {\n    return libraryVersion;\n  }\n  libraryVersion = require(path.resolve(__dirname, '../../../', 'package.json')).version;\n  return libraryVersion;\n}\nexports.getNodejsLibraryVersion = getNodejsLibraryVersion;\n/**\n * The helper function which checks if given InstrumentationInfo is valid.\n * @param info {InstrumentationInfo} The info to be validated.\n * @returns true if given info is valid, false otherwise\n */\nfunction isValidInfo(info) {\n  if (!info || !info.name || !info.version || !info.name.startsWith(exports.NODEJS_LIBRARY_NAME_PREFIX)) {\n    return false;\n  }\n  return true;\n}\n/**\n * The helper method used to reset a status of a flag which indicates if instrumentation info already written or not.\n */\nfunction resetInstrumentationStatus() {\n  global.instrumentationAdded = false;\n}\nexports.resetInstrumentationStatus = resetInstrumentationStatus;","map":{"version":3,"names":["arrify","require","path","protos_1","entry_1","global","instrumentationAdded","libraryVersion","maxDiagnosticValueLen","exports","DIAGNOSTIC_INFO_KEY","INSTRUMENTATION_SOURCE_KEY","NODEJS_LIBRARY_NAME_PREFIX","getInstrumentationInfoStatus","populateInstrumentationInfo","entry","isWritten","entries","entryItem","info","_b","_a","data","validateAndUpdateInstrumentation","push","createDiagnosticEntry","undefined","libraryName","startsWith","Entry","severity","google","logging","type","LogSeverity","INFO","name","truncateValue","version","getNodejsLibraryVersion","infoList","finalInfo","count","isValidInfo","value","maxLen","length","substring","concat","resolve","__dirname","resetInstrumentationStatus"],"sources":["../../../src/utils/instrumentation.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}