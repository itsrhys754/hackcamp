{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapToArabic = exports.getPeriodEndDate = exports.getHoursInMonth = exports.wait = exports.endsWithAny = exports.containsAny = void 0;\nconst moment_1 = __importDefault(require(\"moment\"));\nconst containsAny = (substrings, stringToSearch) => {\n  return substrings.some(substring => new RegExp(`\\\\b${substring}\\\\b`).test(stringToSearch));\n};\nexports.containsAny = containsAny;\nconst endsWithAny = (suffixes, string) => {\n  return suffixes.some(suffix => string.endsWith(suffix));\n};\nexports.endsWithAny = endsWithAny;\nconst wait = async ms => {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n};\nexports.wait = wait;\nconst getHoursInMonth = () => {\n  return (0, moment_1.default)().utc().daysInMonth() * 24;\n};\nexports.getHoursInMonth = getHoursInMonth;\nconst getPeriodEndDate = (startDate, grouping) => {\n  const periodGrouping = {\n    day: moment_1.default.utc(startDate).add(1, 'd').subtract(1, 's').toDate(),\n    week: moment_1.default.utc(startDate).add(1, 'w').subtract(1, 's').toDate(),\n    month: moment_1.default.utc(startDate).add(1, 'M').subtract(1, 's').toDate(),\n    quarter: moment_1.default.utc(startDate).add(1, 'Q').add(1, 'h').subtract(1, 's').toDate(),\n    year: moment_1.default.utc(startDate).add(1, 'y').subtract(1, 's').toDate()\n  };\n  return periodGrouping[grouping];\n};\nexports.getPeriodEndDate = getPeriodEndDate;\nconst mapToArabic = unit => {\n  if (unit == '万') {\n    return 10000;\n  } else {\n    return 100000000;\n  }\n};\nexports.mapToArabic = mapToArabic;","map":{"version":3,"names":["moment_1","__importDefault","require","containsAny","substrings","stringToSearch","some","substring","RegExp","test","exports","endsWithAny","suffixes","string","suffix","endsWith","wait","ms","Promise","resolve","setTimeout","getHoursInMonth","default","utc","daysInMonth","getPeriodEndDate","startDate","grouping","periodGrouping","day","add","subtract","toDate","week","month","quarter","year","mapToArabic","unit"],"sources":["/Users/rhysgregory/node_modules/@cloud-carbon-footprint/common/src/helpers/helpers.ts"],"sourcesContent":["/*\n * © 2021 Thoughtworks, Inc.\n */\n\nimport moment from 'moment'\nimport { GroupBy } from '../Config'\n\nexport const containsAny = (\n  substrings: string[],\n  stringToSearch: string,\n): boolean => {\n  return substrings.some((substring) =>\n    new RegExp(`\\\\b${substring}\\\\b`).test(stringToSearch),\n  )\n}\n\nexport const endsWithAny = (suffixes: string[], string: string): boolean => {\n  return suffixes.some((suffix) => string.endsWith(suffix))\n}\n\nexport const wait = async (ms: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const getHoursInMonth = (): number => {\n  return moment().utc().daysInMonth() * 24\n}\n\nexport const getPeriodEndDate = (startDate: Date, grouping: GroupBy): Date => {\n  const periodGrouping: { [key: string]: Date } = {\n    day: moment.utc(startDate).add(1, 'd').subtract(1, 's').toDate(),\n    week: moment.utc(startDate).add(1, 'w').subtract(1, 's').toDate(),\n    month: moment.utc(startDate).add(1, 'M').subtract(1, 's').toDate(),\n    quarter: moment\n      .utc(startDate)\n      .add(1, 'Q')\n      .add(1, 'h')\n      .subtract(1, 's')\n      .toDate(),\n    year: moment.utc(startDate).add(1, 'y').subtract(1, 's').toDate(),\n  }\n\n  return periodGrouping[grouping]\n}\n\nexport const mapToArabic = (unit: string): number => {\n  if (unit == '万') {\n    return 10000\n  } else {\n    return 100000000\n  }\n}\n"],"mappings":";;;;;;;;;;;AAIA,MAAAA,QAAA,GAAAC,eAAA,CAAAC,OAAA;AAGO,MAAMC,WAAW,GAAGA,CACzBC,UAAoB,EACpBC,cAAsB,KACX;EACX,OAAOD,UAAU,CAACE,IAAI,CAAEC,SAAS,IAC/B,IAAIC,MAAM,CAAC,MAAMD,SAAS,KAAK,CAAC,CAACE,IAAI,CAACJ,cAAc,CAAC,CACtD;AACH,CAAC;AAPYK,OAAA,CAAAP,WAAW,GAAAA,WAAA;AASjB,MAAMQ,WAAW,GAAGA,CAACC,QAAkB,EAAEC,MAAc,KAAa;EACzE,OAAOD,QAAQ,CAACN,IAAI,CAAEQ,MAAM,IAAKD,MAAM,CAACE,QAAQ,CAACD,MAAM,CAAC,CAAC;AAC3D,CAAC;AAFYJ,OAAA,CAAAC,WAAW,GAAAA,WAAA;AAIjB,MAAMK,IAAI,GAAG,MAAOC,EAAU,IAAI;EACvC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;IAC7BC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC;AAJYP,OAAA,CAAAM,IAAI,GAAAA,IAAA;AAMV,MAAMK,eAAe,GAAGA,CAAA,KAAa;EAC1C,OAAO,IAAArB,QAAA,CAAAsB,OAAM,GAAE,CAACC,GAAG,EAAE,CAACC,WAAW,EAAE,GAAG,EAAE;AAC1C,CAAC;AAFYd,OAAA,CAAAW,eAAe,GAAAA,eAAA;AAIrB,MAAMI,gBAAgB,GAAGA,CAACC,SAAe,EAAEC,QAAiB,KAAU;EAC3E,MAAMC,cAAc,GAA4B;IAC9CC,GAAG,EAAE7B,QAAA,CAAAsB,OAAM,CAACC,GAAG,CAACG,SAAS,CAAC,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,MAAM,EAAE;IAChEC,IAAI,EAAEjC,QAAA,CAAAsB,OAAM,CAACC,GAAG,CAACG,SAAS,CAAC,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,MAAM,EAAE;IACjEE,KAAK,EAAElC,QAAA,CAAAsB,OAAM,CAACC,GAAG,CAACG,SAAS,CAAC,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,MAAM,EAAE;IAClEG,OAAO,EAAEnC,QAAA,CAAAsB,OAAM,CACZC,GAAG,CAACG,SAAS,CAAC,CACdI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CACXA,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CACXC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAChBC,MAAM,EAAE;IACXI,IAAI,EAAEpC,QAAA,CAAAsB,OAAM,CAACC,GAAG,CAACG,SAAS,CAAC,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,MAAM;GAChE;EAED,OAAOJ,cAAc,CAACD,QAAQ,CAAC;AACjC,CAAC;AAfYjB,OAAA,CAAAe,gBAAgB,GAAAA,gBAAA;AAiBtB,MAAMY,WAAW,GAAIC,IAAY,IAAY;EAClD,IAAIA,IAAI,IAAI,GAAG,EAAE;IACf,OAAO,KAAK;GACb,MAAM;IACL,OAAO,SAAS;;AAEpB,CAAC;AANY5B,OAAA,CAAA2B,WAAW,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}