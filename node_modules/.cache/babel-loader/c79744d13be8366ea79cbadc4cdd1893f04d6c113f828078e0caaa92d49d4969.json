{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogSync = void 0;\nconst entry_1 = require(\"./entry\");\nconst instrumentation_1 = require(\"./utils/instrumentation\");\nconst log_common_1 = require(\"./utils/log-common\");\n/**\n * A logSync is a named collection of entries in structured log format. In Cloud\n * Logging, structured logs refer to log entries that use the jsonPayload field\n * to add structure to their payloads. In most GCP environments, like GKE and\n * Cloud Functions, structured logs written to process.stdout are automatically\n * picked up and formatted by logging agents.\n *\n * Recommended for Serverless environment logging, especially where async log\n * calls made by the `Log` class can be dropped by the CPU.\n *\n * See {@link https://cloud.google.com/logging/docs/structured-logging|Structured Logging}\n *\n * @class\n *\n * @param {Logging} logging {@link Logging} instance.\n * @param {string} name Name of the logSync.\n * @param {Writable} [transport] transport A custom writable transport stream.\n *     Default: process.stdout.\n *\n * @example\n * ```\n * const {Logging} = require('@google-cloud/logging');\n * const logging = new Logging();\n * const log = logging.logSync('mylog');\n * ```\n */\nclass LogSync {\n  // not projectId, formattedname is expected\n  constructor(logging, name, transport) {\n    this.formattedName_ = log_common_1.formatLogName(logging.projectId, name);\n    this.logging = logging;\n    /**\n     * @name Log#name\n     * @type {string}\n     */\n    this.name = this.formattedName_.split('/').pop();\n    // Default to writing to stdout\n    this.transport = transport || process.stdout;\n  }\n  /**\n   * Write a log entry with a severity of \"ALERT\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.alert(entry);\n   * ```\n   */\n  alert(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'ALERT'), options);\n  }\n  /**\n   * Write a log entry with a severity of \"CRITICAL\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.critical(entry);\n   * ```\n   */\n  critical(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'CRITICAL'), options);\n  }\n  /**\n   * Write a log entry with a severity of \"DEBUG\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.debug(entry);\n   * ```\n   */\n  debug(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'DEBUG'), options);\n  }\n  /**\n   * Write a log entry with a severity of \"EMERGENCY\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.emergency(entry);\n   * ```\n   */\n  emergency(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'EMERGENCY'), options);\n  }\n  entry(metadataOrData, data) {\n    let metadata;\n    if (!data && metadataOrData !== null && Object.prototype.hasOwnProperty.call(metadataOrData, 'httpRequest')) {\n      // If user logs entry(metadata.httpRequest)\n      metadata = metadataOrData;\n      data = {};\n    } else if (!data) {\n      // If user logs entry(message)\n      data = metadataOrData;\n      metadata = {};\n    } else {\n      // If user logs entry(metadata, message)\n      metadata = metadataOrData;\n    }\n    return this.logging.entry(metadata, data);\n  }\n  /**\n   * Write a log entry with a severity of \"ERROR\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.error(entry);\n   * ```\n   */\n  error(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'ERROR'), options);\n  }\n  /**\n   * Write a log entry with a severity of \"INFO\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.info(entry);\n   * ```\n   */\n  info(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'INFO'), options);\n  }\n  /**\n   * Write a log entry with a severity of \"NOTICE\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.notice(entry);\n   * ```\n   */\n  notice(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'NOTICE'), options);\n  }\n  /**\n   * Write a log entry with a severity of \"WARNING\".\n   *\n   * This is a simple wrapper around {@link LogSync#write}. All arguments are\n   * the same as documented there.\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.logSync('my-log');\n   *\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.warning(entry);\n   * ```\n   */\n  warning(entry, options) {\n    this.write(log_common_1.assignSeverityToEntries(entry, 'WARNING'), options);\n  }\n  /**\n   * Write log entries to a custom transport (default: process.stdout).\n   *\n   * @param {Entry|Entry[]} entry A log entry, or array of entries, to write.\n   * @param {?WriteOptions} [options] Write options\n   *\n   * @example\n   * ```\n   * const entry = log.entry('gce_instance', {\n   *   instance: 'my_instance'\n   * });\n   *\n   * log.write(entry);\n   *\n   * //-\n   * // You may also pass multiple log entries to write.\n   * //-\n   * const secondEntry = log.entry('compute.googleapis.com', {\n   *   user: 'my_username'\n   * });\n   *\n   * log.write([entry, secondEntry]);\n   *\n   * //-\n   * // To save some steps, you can also pass in plain values as your entries.\n   * // Note, however, that you must provide a configuration object to specify\n   * // the resource.\n   * //-\n   * const entries = [\n   *   {\n   *     user: 'my_username'\n   *   },\n   *   {\n   *     home: process.env.HOME\n   *   }\n   * ];\n   *\n   * const options = {\n   *   resource: 'compute.googleapis.com'\n   * };\n   *\n   * log.write(entries, options);\n   *\n   * log.write(entries);\n   * });\n   * ```\n   */\n  write(entry, opts) {\n    var _a;\n    const options = opts ? opts : {};\n    // We expect projectId and resource to be set before this fn is called...\n    let structuredEntries;\n    this.formattedName_ = log_common_1.formatLogName(this.logging.projectId, this.name);\n    try {\n      // Make sure to add instrumentation info\n      structuredEntries = instrumentation_1.populateInstrumentationInfo(entry).map(entry => {\n        if (!(entry instanceof entry_1.Entry)) {\n          entry = this.entry(entry);\n        }\n        return entry.toStructuredJSON(this.logging.projectId);\n      });\n      for (const entry of structuredEntries) {\n        entry.logName = this.formattedName_;\n        entry.resource = log_common_1.snakecaseKeys((_a = options.resource) === null || _a === void 0 ? void 0 : _a.labels) || entry.resource || this.logging.detectedResource;\n        entry[entry_1.LABELS_KEY] = options.labels || entry[entry_1.LABELS_KEY];\n        this.transport.write(JSON.stringify(entry) + '\\n');\n      }\n    } catch (err) {\n      // Ignore errors (client libraries do not panic).\n    }\n  }\n}\nexports.LogSync = LogSync;","map":{"version":3,"names":["entry_1","require","instrumentation_1","log_common_1","LogSync","constructor","logging","name","transport","formattedName_","formatLogName","projectId","split","pop","process","stdout","alert","entry","options","write","assignSeverityToEntries","critical","debug","emergency","metadataOrData","data","metadata","Object","prototype","hasOwnProperty","call","error","info","notice","warning","opts","structuredEntries","populateInstrumentationInfo","map","Entry","toStructuredJSON","logName","resource","snakecaseKeys","_a","labels","detectedResource","LABELS_KEY","JSON","stringify","err","exports"],"sources":["../../src/log-sync.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}