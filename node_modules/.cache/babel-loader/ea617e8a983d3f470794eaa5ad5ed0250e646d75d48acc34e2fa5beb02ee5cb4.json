{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.v2 = exports.protos = exports.Logging = exports.Sink = exports.LogSync = exports.formatLogName = exports.assignSeverityToEntries = exports.Severity = exports.Log = exports.Entry = exports.detectServiceContext = exports.middleware = void 0;\nconst common_1 = require(\"@google-cloud/common\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pumpify = require('pumpify');\nconst streamEvents = require(\"stream-events\");\nconst middleware = require(\"./middleware\");\nexports.middleware = middleware;\nconst metadata_1 = require(\"./utils/metadata\");\nObject.defineProperty(exports, \"detectServiceContext\", {\n  enumerable: true,\n  get: function () {\n    return metadata_1.detectServiceContext;\n  }\n});\nconst version = require('../../package.json').version;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst v2 = require('./v2');\nexports.v2 = v2;\nconst entry_1 = require(\"./entry\");\nObject.defineProperty(exports, \"Entry\", {\n  enumerable: true,\n  get: function () {\n    return entry_1.Entry;\n  }\n});\nconst log_common_1 = require(\"./utils/log-common\");\nObject.defineProperty(exports, \"Severity\", {\n  enumerable: true,\n  get: function () {\n    return log_common_1.Severity;\n  }\n});\nObject.defineProperty(exports, \"formatLogName\", {\n  enumerable: true,\n  get: function () {\n    return log_common_1.formatLogName;\n  }\n});\nObject.defineProperty(exports, \"assignSeverityToEntries\", {\n  enumerable: true,\n  get: function () {\n    return log_common_1.assignSeverityToEntries;\n  }\n});\nconst log_1 = require(\"./log\");\nObject.defineProperty(exports, \"Log\", {\n  enumerable: true,\n  get: function () {\n    return log_1.Log;\n  }\n});\nconst log_sync_1 = require(\"./log-sync\");\nObject.defineProperty(exports, \"LogSync\", {\n  enumerable: true,\n  get: function () {\n    return log_sync_1.LogSync;\n  }\n});\nconst sink_1 = require(\"./sink\");\nObject.defineProperty(exports, \"Sink\", {\n  enumerable: true,\n  get: function () {\n    return sink_1.Sink;\n  }\n});\nconst stream_1 = require(\"stream\");\n/**\n * @typedef {object} ClientConfig\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {number} [maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n/**\n * {@link https://cloud.google.com/logging/docs| Cloud Logging} allows you to\n * store, search, analyze, monitor, and alert on log data and events from Google\n * Cloud Platform and Amazon Web Services (AWS).\n *\n * @class\n *\n * See {@link https://cloud.google.com/logging/docs| What is Cloud Logging?}\n *\n * See {@link https://cloud.google.com/logging/docs/api| Introduction to the Cloud Logging API}\n *\n * See {@link https://www.npmjs.com/package/@google-cloud/logging-bunyan| Logging to Google Cloud from Bunyan}\n *\n * See {@link https://www.npmjs.com/package/@google-cloud/logging-winston| Logging to Google Cloud from Winston}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example Import the client library\n * ```\n * const {Logging} = require('@google-cloud/logging');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * const logging = new Logging();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicitcredentials</a>:\n * ```\n * const logging = new Logging({ projectId:\n *  'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:logging_quickstart\n * Full quickstart example:\n */\nclass Logging {\n  constructor(options) {\n    // Determine what scopes are needed.\n    // It is the union of the scopes on all three clients.\n    const scopes = [];\n    const clientClasses = [v2.ConfigServiceV2Client, v2.LoggingServiceV2Client, v2.MetricsServiceV2Client];\n    for (const clientClass of clientClasses) {\n      for (const scope of clientClass.scopes) {\n        if (scopes.indexOf(scope) === -1) {\n          scopes.push(scope);\n        }\n      }\n    }\n    const options_ = extend({\n      libName: 'gccl',\n      libVersion: version,\n      scopes\n    }, options);\n    this.api = {};\n    this.auth = new gax.GoogleAuth(options_);\n    this.options = options_;\n    this.projectId = this.options.projectId || '{{projectId}}';\n    this.configService = new v2.ConfigServiceV2Client(this.options);\n    this.loggingService = new v2.LoggingServiceV2Client(this.options);\n  }\n  // jscs:disable maximumLineLength\n  /**\n   * Create a sink.\n   *\n   * See {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.sinks|Sink Overview}\n   * See {@link https://cloud.google.com/logging/docs/view/advanced_filters|Advanced Logs Filters}\n   * See {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.sinks/create|projects.sinks.create API Documentation}\n   *\n   * @param {string} name Name of the sink.\n   * @param {CreateSinkRequest} config Config to set for the sink.\n   * @param {CreateSinkCallback} [callback] Callback function.\n   * @returns {Promise<CreateSinkResponse>}\n   * @throws {Error} If a name is not provided.\n   * @throws {Error} if a config object is not provided.\n   * @see Sink#create\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage({\n   *   projectId: 'grape-spaceship-123'\n   * });\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * const config = {\n   *   destination: storage.bucket('logging-bucket'),\n   *   filter: 'severity = ALERT'\n   * };\n   *\n   * function callback(err, sink, apiResponse) {\n   *   // `sink` is a Sink object.\n   * }\n   *\n   * logging.createSink('new-sink-name', config, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * logging.createSink('new-sink-name', config).then(data => {\n   *   const sink = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/sinks.js</caption>\n   * region_tag:logging_create_sink\n   * Another example:\n   */\n  async createSink(name, config) {\n    if (typeof name !== 'string') {\n      throw new Error('A sink name must be provided.');\n    }\n    if (typeof config !== 'object') {\n      throw new Error('A sink configuration object must be provided.');\n    }\n    if (common_1.util.isCustomType(config.destination, 'bigquery/dataset')) {\n      await this.setAclForDataset_(config);\n    }\n    if (common_1.util.isCustomType(config.destination, 'pubsub/topic')) {\n      await this.setAclForTopic_(config);\n    }\n    if (common_1.util.isCustomType(config.destination, 'storage/bucket')) {\n      await this.setAclForBucket_(config);\n    }\n    const reqOpts = {\n      parent: 'projects/' + this.projectId,\n      sink: extend({}, config, {\n        name\n      }),\n      uniqueWriterIdentity: config.uniqueWriterIdentity\n    };\n    delete reqOpts.sink.gaxOptions;\n    delete reqOpts.sink.uniqueWriterIdentity;\n    await this.setProjectId(reqOpts);\n    const [resp] = await this.configService.createSink(reqOpts, config.gaxOptions);\n    const sink = this.sink(resp.name);\n    sink.metadata = resp;\n    return [sink, resp];\n  }\n  /**\n   * Create an entry object.\n   *\n   * Using this method will not itself make any API requests. You will use\n   * the object returned in other API calls, such as\n   * {@link Log#write}.\n   *\n   * Note, {@link https://cloud.google.com/logging/quotas|Cloud Logging Quotas and limits}\n   * dictates that the maximum log entry size, including all\n   * [LogEntry Resource properties]{@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry},\n   * cannot exceed _approximately_ 256 KB.\n   *\n   * See {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry|LogEntry JSON representation}\n   *\n   * @param {?object|?string} [resource] See a\n   *     [Monitored\n   * Resource](https://cloud.google.com/logging/docs/reference/v2/rest/v2/MonitoredResource).\n   * @param {object|string} data The data to use as the value for this log\n   *     entry.\n   * @returns {Entry}\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * const resource = {\n   *   type: 'gce_instance',\n   *   labels: {\n   *     zone: 'global',\n   *     instance_id: '3'\n   *   }\n   * };\n   *\n   * const entry = logging.entry(resource, {\n   *   delegate: 'my_username'\n   * });\n   *\n   * entry.toJSON();\n   * // {\n   * //   resource: {\n   * //     type: 'gce_instance',\n   * //     labels: {\n   * //       zone: 'global',\n   * //       instance_id: '3'\n   * //     }\n   * //   },\n   * //   jsonPayload: {\n   * //     delegate: 'my_username'\n   * //   }\n   * // }\n   * ```\n   */\n  entry(resource, data) {\n    return new entry_1.Entry(resource, data);\n  }\n  async getEntries(opts) {\n    const options = opts ? opts : {};\n    // By default, sort entries by descending timestamp\n    let reqOpts = extend({\n      orderBy: 'timestamp desc'\n    }, options);\n    // By default, filter entries to last 24 hours only\n    const time = new Date();\n    time.setDate(time.getDate() - 1);\n    const timeFilter = `timestamp >= \"${time.toISOString()}\"`;\n    if (!options.filter) {\n      reqOpts = extend({\n        filter: timeFilter\n      }, reqOpts);\n    } else if (!options.filter.includes('timestamp')) {\n      reqOpts.filter += ` AND ${timeFilter}`;\n    }\n    reqOpts.resourceNames = arrify(reqOpts.resourceNames);\n    this.projectId = await this.auth.getProjectId();\n    const resourceName = 'projects/' + this.projectId;\n    if (reqOpts.resourceNames.indexOf(resourceName) === -1) {\n      reqOpts.resourceNames.push(resourceName);\n    }\n    delete reqOpts.autoPaginate;\n    delete reqOpts.gaxOptions;\n    const gaxOptions = extend({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOptions);\n    const resp = await this.loggingService.listLogEntries(reqOpts, gaxOptions);\n    const [entries] = resp;\n    if (entries) {\n      resp[0] = entries.map(entry_1.Entry.fromApiResponse_);\n    }\n    return resp;\n  }\n  /**\n   * List the {@link Entry} objects in your logs as a readable object\n   * stream.\n   *\n   * @method Logging#getEntriesStream\n   * @param {GetEntriesRequest} [query] Query object for listing entries.\n   * @returns {ReadableStream} A readable stream that emits {@link Entry}\n   *     instances.\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * logging.getEntriesStream()\n   *   .on('error', console.error)\n   *   .on('data', entry => {\n   *     // `entry` is a Cloud Logging entry object.\n   *     // See the `data` property to read the data from the entry.\n   *   })\n   *   .on('end', function() {\n   *     // All entries retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * logging.getEntriesStream()\n   *   .on('data', function(entry) {\n   *     this.end();\n   *   });\n   * ```\n   */\n  getEntriesStream(options = {}) {\n    let requestStream;\n    const userStream = streamEvents(pumpify.obj());\n    userStream.abort = () => {\n      if (requestStream) {\n        requestStream.abort();\n      }\n    };\n    const toEntryStream = new stream_1.Transform({\n      objectMode: true,\n      transform: (chunk, encoding, callback) => {\n        callback(null, entry_1.Entry.fromApiResponse_(chunk));\n      }\n    });\n    userStream.once('reading', () => {\n      this.auth.getProjectId().then(projectId => {\n        this.projectId = projectId;\n        if (options.log) {\n          if (options.filter) {\n            options.filter = `(${options.filter}) AND logName=\"${log_common_1.formatLogName(this.projectId, options.log)}\"`;\n          } else {\n            options.filter = `logName=\"${log_common_1.formatLogName(this.projectId, options.log)}\"`;\n          }\n          delete options.log;\n        }\n        const reqOpts = extend({\n          orderBy: 'timestamp desc'\n        }, options);\n        reqOpts.resourceNames = arrify(reqOpts.resourceNames);\n        reqOpts.resourceNames.push(`projects/${this.projectId}`);\n        delete reqOpts.autoPaginate;\n        delete reqOpts.gaxOptions;\n        const gaxOptions = extend({\n          autoPaginate: options.autoPaginate\n        }, options.gaxOptions);\n        let gaxStream;\n        requestStream = streamEvents(new stream_1.PassThrough({\n          objectMode: true\n        }));\n        requestStream.abort = () => {\n          if (gaxStream && gaxStream.cancel) {\n            gaxStream.cancel();\n          }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!global.GCLOUD_SANDBOX_ENV) {\n          requestStream.once('reading', () => {\n            try {\n              gaxStream = this.loggingService.listLogEntriesStream(reqOpts, gaxOptions);\n            } catch (error) {\n              requestStream.destroy(error);\n              return;\n            }\n            gaxStream.on('error', err => {\n              requestStream.destroy(err);\n            }).pipe(requestStream);\n            return;\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        userStream.setPipeline(requestStream, toEntryStream);\n      });\n    });\n    return userStream;\n  }\n  /**\n   * Query object for streaming entries.\n   *\n   * @typedef {object} TailEntriesRequest\n   * @property {Array.<string>|string} [resourceNames] Names of project\n   *     resources to stream logs out of.\n   * @property {string} [filter] An\n   *     [advanced logs\n   * filter](https://cloud.google.com/logging/docs/view/advanced_filters). An\n   * empty filter matches all log entries.\n   * @property {number} [bufferWindow=2] A setting to balance the tradeoff\n   *     between viewing the log entries as they are being written and viewing\n   *     them in ascending order.\n   * @property {string} [log] A name of the log specifying to only return\n   *     entries from this log.\n   * @property {object} [gaxOptions] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/global.html#CallOptions.\n   */\n  /**\n   * Streaming read of live logs as log entries are ingested. Until the stream\n   * is terminated, it will continue reading logs.\n   *\n   * @method Logging#tailEntries\n   * @param {TailEntriesRequest} [query] Query object for tailing entries.\n   * @returns {DuplexStream} A duplex stream that emits TailEntriesResponses\n   * containing an array of {@link Entry} instances.\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * logging.tailEntries()\n   *   .on('error', console.error)\n   *   .on('data', resp => {\n   *     console.log(resp.entries);\n   *     console.log(resp.suppressionInfo);\n   *   })\n   *   .on('end', function() {\n   *     // All entries retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * logging.getEntriesStream()\n   *   .on('data', function(entry) {\n   *     this.end();\n   *   });\n   * ```\n   */\n  tailEntries(options = {}) {\n    const userStream = streamEvents(pumpify.obj());\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let gaxStream;\n    userStream.abort = () => {\n      if (gaxStream && gaxStream.cancel) {\n        gaxStream.cancel();\n      }\n    };\n    const transformStream = new stream_1.Transform({\n      objectMode: true,\n      transform: (chunk, encoding, callback) => {\n        callback(null, (() => {\n          const formattedEntries = [];\n          chunk.entries.forEach(entry => {\n            formattedEntries.push(entry_1.Entry.fromApiResponse_(entry));\n          });\n          const resp = {\n            entries: formattedEntries,\n            suppressionInfo: chunk.suppressionInfo\n          };\n          return resp;\n        })());\n      }\n    });\n    this.auth.getProjectId().then(projectId => {\n      this.projectId = projectId;\n      if (options.log) {\n        if (options.filter) {\n          options.filter = `(${options.filter}) AND logName=\"${log_common_1.formatLogName(this.projectId, options.log)}\"`;\n        } else {\n          options.filter = `logName=\"${log_common_1.formatLogName(this.projectId, options.log)}\"`;\n        }\n      }\n      options.resourceNames = arrify(options.resourceNames);\n      options.resourceNames.push(`projects/${this.projectId}`);\n      const writeOptions = {\n        resourceNames: options.resourceNames,\n        ...(options.filter && {\n          filter: options.filter\n        }),\n        ...(options.bufferWindow && {\n          bufferwindow: options.bufferWindow\n        })\n      };\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (!global.GCLOUD_SANDBOX_ENV) {\n        gaxStream = this.loggingService.tailLogEntries(options.gaxOptions);\n        // Write can only be called once in a single tail streaming session.\n        gaxStream.write(writeOptions);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        userStream.setPipeline(gaxStream, transformStream);\n      }\n    });\n    return userStream;\n  }\n  async getLogs(opts) {\n    const options = opts ? opts : {};\n    this.projectId = await this.auth.getProjectId();\n    const reqOpts = extend({}, options, {\n      parent: 'projects/' + this.projectId\n    });\n    delete reqOpts.autoPaginate;\n    delete reqOpts.gaxOptions;\n    const gaxOptions = extend({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOptions);\n    const resp = await this.loggingService.listLogs(reqOpts, gaxOptions);\n    const [logs] = resp;\n    if (logs) {\n      resp[0] = logs.map(logName => this.log(logName));\n    }\n    return resp;\n  }\n  /**\n   * List the {@link Log} objects in your project as a readable object stream.\n   *\n   * @method Logging#getLogsStream\n   * @param {GetLogsRequest} [query] Query object for listing entries.\n   * @returns {ReadableStream} A readable stream that emits {@link Log}\n   *     instances.\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * logging.getLogsStream()\n   *   .on('error', console.error)\n   *   .on('data', log => {\n   *     // `log` is a Cloud Logging log object.\n   *   })\n   *   .on('end', function() {\n   *     // All logs retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * logging.getLogsStream()\n   *   .on('data', log => {\n   *     this.end();\n   *   });\n   * ```\n   */\n  getLogsStream(options = {}) {\n    options = options || {};\n    let requestStream;\n    const userStream = streamEvents(pumpify.obj());\n    userStream.abort = () => {\n      if (requestStream) {\n        requestStream.abort();\n      }\n    };\n    const toLogStream = new stream_1.Transform({\n      objectMode: true,\n      transform: (chunk, encoding, callback) => {\n        callback(null, this.log(chunk));\n      }\n    });\n    userStream.once('reading', () => {\n      this.auth.getProjectId().then(projectId => {\n        this.projectId = projectId;\n        const reqOpts = extend({}, options, {\n          parent: 'projects/' + this.projectId\n        });\n        delete reqOpts.gaxOptions;\n        const gaxOptions = extend({\n          autoPaginate: options.autoPaginate\n        }, options.gaxOptions);\n        let gaxStream;\n        requestStream = streamEvents(new stream_1.PassThrough({\n          objectMode: true\n        }));\n        requestStream.abort = () => {\n          if (gaxStream && gaxStream.cancel) {\n            gaxStream.cancel();\n          }\n        };\n        requestStream.once('reading', () => {\n          try {\n            gaxStream = this.loggingService.listLogsStream(reqOpts, gaxOptions);\n          } catch (error) {\n            requestStream.destroy(error);\n            return;\n          }\n          gaxStream.on('error', err => {\n            requestStream.destroy(err);\n          }).pipe(requestStream);\n          return;\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        userStream.setPipeline(requestStream, toLogStream);\n      });\n    });\n    return userStream;\n  }\n  async getSinks(opts) {\n    const options = opts ? opts : {};\n    this.projectId = await this.auth.getProjectId();\n    const reqOpts = extend({}, options, {\n      parent: 'projects/' + this.projectId\n    });\n    delete reqOpts.autoPaginate;\n    delete reqOpts.gaxOptions;\n    const gaxOptions = extend({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOptions);\n    const resp = await this.configService.listSinks(reqOpts, gaxOptions);\n    const [sinks] = resp;\n    if (sinks) {\n      resp[0] = sinks.map(sink => {\n        const sinkInstance = this.sink(sink.name);\n        sinkInstance.metadata = sink;\n        return sinkInstance;\n      });\n    }\n    return resp;\n  }\n  /**\n   * Get the {@link Sink} objects associated with this project as a\n   * readable object stream.\n   *\n   * @method Logging#getSinksStream\n   * @param {GetSinksRequest} [query] Query object for listing sinks.\n   * @returns {ReadableStream} A readable stream that emits {@link Sink}\n   *     instances.\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * logging.getSinksStream()\n   *   .on('error', console.error)\n   *   .on('data', sink => {\n   *     // `sink` is a Sink object.\n   *   })\n   *   .on('end', function() {\n   *     // All sinks retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * logging.getSinksStream()\n   *   .on('data', function(sink) {\n   *     this.end();\n   *   });\n   * ```\n   */\n  getSinksStream(options) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    options = options || {};\n    let requestStream;\n    const userStream = streamEvents(pumpify.obj());\n    userStream.abort = () => {\n      if (requestStream) {\n        requestStream.abort();\n      }\n    };\n    const toSinkStream = new stream_1.Transform({\n      objectMode: true,\n      transform: (chunk, encoding, callback) => {\n        const sinkInstance = self.sink(chunk.name);\n        sinkInstance.metadata = chunk;\n        callback(null, sinkInstance);\n      }\n    });\n    userStream.once('reading', () => {\n      this.auth.getProjectId().then(projectId => {\n        this.projectId = projectId;\n        const reqOpts = extend({}, options, {\n          parent: 'projects/' + self.projectId\n        });\n        delete reqOpts.gaxOptions;\n        const gaxOptions = extend({\n          autoPaginate: options.autoPaginate\n        }, options.gaxOptions);\n        let gaxStream;\n        requestStream = streamEvents(new stream_1.PassThrough({\n          objectMode: true\n        }));\n        requestStream.abort = () => {\n          if (gaxStream && gaxStream.cancel) {\n            gaxStream.cancel();\n          }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!global.GCLOUD_SANDBOX_ENV) {\n          requestStream.once('reading', () => {\n            try {\n              gaxStream = this.configService.listSinksStream(reqOpts, gaxOptions);\n            } catch (error) {\n              requestStream.destroy(error);\n              return;\n            }\n            gaxStream.on('error', err => {\n              requestStream.destroy(err);\n            }).pipe(requestStream);\n            return;\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        userStream.setPipeline(requestStream, toSinkStream);\n      });\n    });\n    return userStream;\n  }\n  /**\n   * Get a reference to a Cloud Logging log.\n   *\n   * See {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.logs|Log Overview}\n   *\n   * @param {string} name Name of the existing log.\n   * @param {object} [options] Configuration object.\n   * @param {boolean} [options.removeCircular] Replace circular references in\n   *     logged objects with a string value, `[Circular]`. (Default: false)\n   * @returns {Log}\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.log('my-log');\n   * ```\n   */\n  log(name, options) {\n    return new log_1.Log(this, name, options);\n  }\n  /**\n   * Get a reference to a Cloud Logging logSync.\n   *\n   * @param {string} name Name of the existing log.\n   * @param {object} transport An optional write stream.\n   * @returns {LogSync}\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   *\n   * // Optional: enrich logs with additional context\n   * await logging.setProjectId();\n   * await logging.setDetectedResource();\n   *\n   * // Default transport writes to process.stdout\n   * const log = logging.logSync('my-log');\n   * ```\n   */\n  logSync(name, transport) {\n    return new log_sync_1.LogSync(this, name, transport);\n  }\n  /**\n   * Get a reference to a Cloud Logging sink.\n   *\n   * See {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.sinks|Sink Overview}\n   *\n   * @param {string} name Name of the existing sink.\n   * @returns {Sink}\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const sink = logging.sink('my-sink');\n   * ```\n   */\n  sink(name) {\n    return new sink_1.Sink(this, name);\n  }\n  /**\n   * Funnel all API requests through this method, to be sure we have a project\n   * ID.\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] Callback function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  request(config, callback) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const isStreamMode = !callback;\n    let gaxStream;\n    let stream;\n    if (isStreamMode) {\n      stream = streamEvents(new stream_1.PassThrough({\n        objectMode: true\n      }));\n      stream.abort = () => {\n        if (gaxStream && gaxStream.cancel) {\n          gaxStream.cancel();\n        }\n      };\n      stream.once('reading', makeRequestStream);\n    } else {\n      makeRequestCallback();\n    }\n    function prepareGaxRequest(callback) {\n      self.auth.getProjectId((err, projectId) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n        self.projectId = projectId;\n        let gaxClient = self.api[config.client];\n        if (!gaxClient) {\n          // Lazily instantiate client.\n          gaxClient = new v2[config.client](self.options);\n          self.api[config.client] = gaxClient;\n        }\n        let reqOpts = extend(true, {}, config.reqOpts);\n        reqOpts = projectify_1.replaceProjectIdToken(reqOpts, projectId);\n        const requestFn = gaxClient[config.method].bind(gaxClient, reqOpts, config.gaxOpts);\n        callback(null, requestFn);\n      });\n    }\n    function makeRequestCallback() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (global.GCLOUD_SANDBOX_ENV) {\n        return;\n      }\n      prepareGaxRequest((err, requestFn) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n        requestFn(callback);\n      });\n    }\n    function makeRequestStream() {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (global.GCLOUD_SANDBOX_ENV) {\n        return new stream_1.PassThrough({\n          objectMode: true\n        });\n      }\n      prepareGaxRequest((err, requestFn) => {\n        if (err) {\n          stream.destroy(err);\n          return;\n        }\n        gaxStream = requestFn();\n        gaxStream.on('error', err => {\n          stream.destroy(err);\n        }).pipe(stream);\n      });\n      return;\n    }\n    return stream;\n  }\n  /**\n   * This method is called when creating a sink with a Bucket destination. The\n   * bucket must first grant proper ACL access to the Cloud Logging\n   * account.\n   *\n   * The parameters are the same as what {@link Logging#createSink} accepts.\n   *\n   * @private\n   */\n  async setAclForBucket_(config) {\n    const bucket = config.destination;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    await bucket.acl.owners.addGroup('cloud-logs@google.com');\n    config.destination = 'storage.googleapis.com/' + bucket.name;\n  }\n  /**\n   * This method is called when creating a sink with a Dataset destination. The\n   * dataset must first grant proper ACL access to the Cloud Logging\n   * account.\n   *\n   * The parameters are the same as what {@link Logging#createSink} accepts.\n   *\n   * @private\n   */\n  async setAclForDataset_(config) {\n    const dataset = config.destination;\n    const [metadata] = await dataset.getMetadata();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const access = [].slice.call(arrify(metadata.access));\n    access.push({\n      role: 'WRITER',\n      groupByEmail: 'cloud-logs@google.com'\n    });\n    await dataset.setMetadata({\n      access\n    });\n    const baseUrl = 'bigquery.googleapis.com';\n    const pId = dataset.parent.projectId;\n    const dId = dataset.id;\n    config.destination = `${baseUrl}/projects/${pId}/datasets/${dId}`;\n  }\n  /**\n   * This method is called when creating a sink with a Topic destination. The\n   * topic must first grant proper ACL access to the Cloud Logging\n   * account.\n   *\n   * The parameters are the same as what {@link Logging#createSink} accepts.\n   *\n   * @private\n   */\n  async setAclForTopic_(config) {\n    const topic = config.destination;\n    const [policy] = await topic.iam.getPolicy();\n    policy.bindings = arrify(policy.bindings);\n    policy.bindings.push({\n      role: 'roles/pubsub.publisher',\n      members: ['serviceAccount:cloud-logs@system.gserviceaccount.com']\n    });\n    await topic.iam.setPolicy(policy);\n    const baseUrl = 'pubsub.googleapis.com';\n    const topicName = topic.name;\n    config.destination = `${baseUrl}/${topicName}`;\n  }\n  /**\n   * setProjectId detects and sets a projectId string on the Logging instance.\n   * It can be invoked once to ensure ensuing LogSync entries have a projectID.\n   * @param reqOpts\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async setProjectId(reqOpts) {\n    if (this.projectId === '{{projectId}}') this.projectId = await this.auth.getProjectId();\n    if (reqOpts) reqOpts = projectify_1.replaceProjectIdToken(reqOpts, this.projectId);\n  }\n  /**\n   * setResource detects and sets a detectedresource object on the Logging\n   * instance. It can be invoked once to ensure ensuing LogSync entries contain\n   * resource context.\n   */\n  async setDetectedResource() {\n    if (!this.detectedResource) {\n      this.detectedResource = await metadata_1.getDefaultResource(this.auth);\n    }\n  }\n}\nexports.Logging = Logging;\n/*! Developer Documentation\n * All async methods (except for streams) will execute a callback in the event\n * that a callback is provided.\n */\npromisify_1.callbackifyAll(Logging, {\n  exclude: ['request']\n});\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Logging, ['getEntries', 'getLogs', 'getSinks']);\n/**\n * Reference to the low-level auto-generated clients for the V2 Logging service.\n *\n * @type {object}\n * @property {constructor} LoggingServiceV2Client\n *   Reference to {@link v2.LoggingServiceV2Client}\n * @property {constructor} ConfigServiceV2Client\n *   Reference to {@link v2.ConfigServiceV2Client}\n * @property {constructor} MetricsServiceV2Client\n *   Reference to {@link v2.MetricsServiceV2Client}\n */\nmodule.exports.v2 = v2;\nconst protos = require(\"../protos/protos\");\nexports.protos = protos;","map":{"version":3,"names":["common_1","require","paginator_1","projectify_1","promisify_1","arrify","extend","gax","pumpify","streamEvents","middleware","exports","metadata_1","Object","defineProperty","enumerable","get","detectServiceContext","version","v2","entry_1","Entry","log_common_1","Severity","formatLogName","assignSeverityToEntries","log_1","Log","log_sync_1","LogSync","sink_1","Sink","stream_1","Logging","constructor","options","scopes","clientClasses","ConfigServiceV2Client","LoggingServiceV2Client","MetricsServiceV2Client","clientClass","scope","indexOf","push","options_","libName","libVersion","api","auth","GoogleAuth","projectId","configService","loggingService","createSink","name","config","Error","util","isCustomType","destination","setAclForDataset_","setAclForTopic_","setAclForBucket_","reqOpts","parent","sink","uniqueWriterIdentity","gaxOptions","setProjectId","resp","metadata","entry","resource","data","getEntries","opts","orderBy","time","Date","setDate","getDate","timeFilter","toISOString","filter","includes","resourceNames","getProjectId","resourceName","autoPaginate","listLogEntries","entries","map","fromApiResponse_","getEntriesStream","requestStream","userStream","obj","abort","toEntryStream","Transform","objectMode","transform","chunk","encoding","callback","once","then","log","gaxStream","PassThrough","cancel","global","GCLOUD_SANDBOX_ENV","listLogEntriesStream","error","destroy","on","err","pipe","setPipeline","tailEntries","transformStream","formattedEntries","forEach","suppressionInfo","writeOptions","bufferWindow","bufferwindow","tailLogEntries","write","getLogs","listLogs","logs","logName","getLogsStream","toLogStream","listLogsStream","getSinks","listSinks","sinks","sinkInstance","getSinksStream","self","toSinkStream","listSinksStream","logSync","transport","request","isStreamMode","stream","makeRequestStream","makeRequestCallback","prepareGaxRequest","gaxClient","client","replaceProjectIdToken","requestFn","method","bind","gaxOpts","bucket","acl","owners","addGroup","dataset","getMetadata","access","slice","call","role","groupByEmail","setMetadata","baseUrl","pId","dId","id","topic","policy","iam","getPolicy","bindings","members","setPolicy","topicName","setDetectedResource","detectedResource","getDefaultResource","callbackifyAll","exclude","paginator","module","protos"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,MAAA,GAAAJ,OAAA;AACA,MAAAK,MAAA,GAAAL,OAAA;AACA,MAAAM,GAAA,GAAAN,OAAA;AAGA;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,SAAS,CAAC;AAClC,MAAAQ,YAAA,GAAAR,OAAA;AACA,MAAAS,UAAA,GAAAT,OAAA;AAMQU,OAAA,CAAAD,UAAA,GAAAA,UAAA;AALR,MAAAE,UAAA,GAAAX,OAAA;AAOQY,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAPAJ,UAAA,CAAAK,oBAAoB;EAAA;AAAA;AAS5B,MAAMC,OAAO,GAAGjB,OAAO,CAAC,oBAAoB,CAAC,CAACiB,OAAO;AACrD;AACA,MAAMC,EAAE,GAAGlB,OAAO,CAAC,MAAM,CAAC;AA8gDlBU,OAAA,CAAAQ,EAAA,GAAAA,EAAA;AA5gDR,MAAAC,OAAA,GAAAnB,OAAA;AA26CQY,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA36CAI,OAAA,CAAAC,KAAK;EAAA;AAAA;AACb,MAAAC,YAAA,GAAArB,OAAA;AAw7CQY,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAt7CNM,YAAA,CAAAC,QAAQ;EAAA;AAAA;AA07CFV,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAx7CNM,YAAA,CAAAE,aAAa;EAAA;AAAA;AAu7CPX,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAt7CNM,YAAA,CAAAG,uBAAuB;EAAA;AAAA;AAEzB,MAAAC,KAAA,GAAAzB,OAAA;AA46CQY,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA56CAU,KAAA,CAAAC,GAAG;EAAA;AAAA;AACX,MAAAC,UAAA,GAAA3B,OAAA;AAs8CQY,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAt8CAY,UAAA,CAAAC,OAAO;EAAA;AAAA;AACf,MAAAC,MAAA,GAAA7B,OAAA;AA88CQY,MAAA,CAAAC,cAAA,CAAAH,OAAA;EAAAI,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA98CAc,MAAA,CAAAC,IAAI;EAAA;AAAA;AACZ,MAAAC,QAAA,GAAA/B,OAAA;AA+IA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,MAAMgC,OAAO;EASXC,YAAYC,OAAwB;IAClC;IACA;IACA,MAAMC,MAAM,GAAc,EAAE;IAC5B,MAAMC,aAAa,GAAG,CACpBlB,EAAE,CAACmB,qBAAqB,EACxBnB,EAAE,CAACoB,sBAAsB,EACzBpB,EAAE,CAACqB,sBAAsB,CAC1B;IACD,KAAK,MAAMC,WAAW,IAAIJ,aAAa,EAAE;MACvC,KAAK,MAAMK,KAAK,IAAID,WAAW,CAACL,MAAM,EAAE;QACtC,IAAIA,MAAM,CAACO,OAAO,CAACD,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;UAChCN,MAAM,CAACQ,IAAI,CAACF,KAAK,CAAC;;;;IAIxB,MAAMG,QAAQ,GAAGvC,MAAM,CACrB;MACEwC,OAAO,EAAE,MAAM;MACfC,UAAU,EAAE7B,OAAO;MACnBkB;KACD,EACDD,OAAO,CACR;IACD,IAAI,CAACa,GAAG,GAAG,EAAE;IACb,IAAI,CAACC,IAAI,GAAG,IAAI1C,GAAG,CAAC2C,UAAU,CAACL,QAAQ,CAAC;IACxC,IAAI,CAACV,OAAO,GAAGU,QAAQ;IACvB,IAAI,CAACM,SAAS,GAAG,IAAI,CAAChB,OAAO,CAACgB,SAAS,IAAI,eAAe;IAC1D,IAAI,CAACC,aAAa,GAAG,IAAIjC,EAAE,CAACmB,qBAAqB,CAAC,IAAI,CAACH,OAAO,CAAC;IAC/D,IAAI,CAACkB,cAAc,GAAG,IAAIlC,EAAE,CAACoB,sBAAsB,CAAC,IAAI,CAACJ,OAAO,CAAC;EACnE;EAsCA;EACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgDA,MAAMmB,UAAUA,CACdC,IAAY,EACZC,MAAyB;IAEzB,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;;IAElD,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;;IAElE,IAAIzD,QAAA,CAAA0D,IAAI,CAACC,YAAY,CAACH,MAAM,CAACI,WAAW,EAAE,kBAAkB,CAAC,EAAE;MAC7D,MAAM,IAAI,CAACC,iBAAiB,CAACL,MAAM,CAAC;;IAEtC,IAAIxD,QAAA,CAAA0D,IAAI,CAACC,YAAY,CAACH,MAAM,CAACI,WAAW,EAAE,cAAc,CAAC,EAAE;MACzD,MAAM,IAAI,CAACE,eAAe,CAACN,MAAM,CAAC;;IAEpC,IAAIxD,QAAA,CAAA0D,IAAI,CAACC,YAAY,CAACH,MAAM,CAACI,WAAW,EAAE,gBAAgB,CAAC,EAAE;MAC3D,MAAM,IAAI,CAACG,gBAAgB,CAACP,MAAM,CAAC;;IAErC,MAAMQ,OAAO,GAAG;MACdC,MAAM,EAAE,WAAW,GAAG,IAAI,CAACd,SAAS;MACpCe,IAAI,EAAE5D,MAAM,CAAC,EAAE,EAAEkD,MAAM,EAAE;QAACD;MAAI,CAAC,CAAC;MAChCY,oBAAoB,EAAEX,MAAM,CAACW;KAC9B;IACD,OAAOH,OAAO,CAACE,IAAI,CAACE,UAAU;IAC9B,OAAOJ,OAAO,CAACE,IAAI,CAACC,oBAAoB;IACxC,MAAM,IAAI,CAACE,YAAY,CAACL,OAAO,CAAC;IAChC,MAAM,CAACM,IAAI,CAAC,GAAG,MAAM,IAAI,CAAClB,aAAa,CAACE,UAAU,CAChDU,OAAO,EACPR,MAAM,CAACY,UAAU,CAClB;IACD,MAAMF,IAAI,GAAG,IAAI,CAACA,IAAI,CAACI,IAAI,CAACf,IAAI,CAAC;IACjCW,IAAI,CAACK,QAAQ,GAAGD,IAAI;IACpB,OAAO,CAACJ,IAAI,EAAEI,IAAI,CAAC;EACrB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqDAE,KAAKA,CAACC,QAAmB,EAAEC,IAAkB;IAC3C,OAAO,IAAItD,OAAA,CAAAC,KAAK,CAACoD,QAAQ,EAAEC,IAAI,CAAC;EAClC;EA2FA,MAAMC,UAAUA,CACdC,IAA6C;IAE7C,MAAMzC,OAAO,GAAGyC,IAAI,GAAIA,IAA0B,GAAG,EAAE;IAEvD;IACA,IAAIZ,OAAO,GAAG1D,MAAM,CAAC;MAACuE,OAAO,EAAE;IAAgB,CAAC,EAAE1C,OAAO,CAAC;IAE1D;IACA,MAAM2C,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAAG,CAAC,CAAC;IAChC,MAAMC,UAAU,GAAG,iBAAiBJ,IAAI,CAACK,WAAW,EAAE,GAAG;IACzD,IAAI,CAAChD,OAAO,CAACiD,MAAM,EAAE;MACnBpB,OAAO,GAAG1D,MAAM,CAAC;QAAC8E,MAAM,EAAEF;MAAU,CAAC,EAAElB,OAAO,CAAC;KAChD,MAAM,IAAI,CAAC7B,OAAO,CAACiD,MAAM,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;MAChDrB,OAAO,CAACoB,MAAM,IAAI,QAAQF,UAAU,EAAE;;IAGxClB,OAAO,CAACsB,aAAa,GAAGjF,MAAM,CAAC2D,OAAO,CAACsB,aAAc,CAAC;IACtD,IAAI,CAACnC,SAAS,GAAG,MAAM,IAAI,CAACF,IAAI,CAACsC,YAAY,EAAE;IAC/C,MAAMC,YAAY,GAAG,WAAW,GAAG,IAAI,CAACrC,SAAS;IACjD,IAAIa,OAAO,CAACsB,aAAa,CAAC3C,OAAO,CAAC6C,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;MACtDxB,OAAO,CAACsB,aAAa,CAAC1C,IAAI,CAAC4C,YAAY,CAAC;;IAE1C,OAAOxB,OAAO,CAACyB,YAAY;IAC3B,OAAOzB,OAAO,CAACI,UAAU;IACzB,MAAMA,UAAU,GAAG9D,MAAM,CACvB;MACEmF,YAAY,EAAEtD,OAAQ,CAACsD;KACxB,EACDtD,OAAQ,CAACiC,UAAU,CACpB;IACD,MAAME,IAAI,GAAG,MAAM,IAAI,CAACjB,cAAc,CAACqC,cAAc,CAAC1B,OAAO,EAAEI,UAAU,CAAC;IAC1E,MAAM,CAACuB,OAAO,CAAC,GAAGrB,IAAI;IACtB,IAAIqB,OAAO,EAAE;MACXrB,IAAI,CAAC,CAAC,CAAC,GAAGqB,OAAO,CAACC,GAAG,CAACxE,OAAA,CAAAC,KAAK,CAACwE,gBAAgB,CAAC;;IAE/C,OAAOvB,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCAwB,gBAAgBA,CAAC3D,OAAA,GAA6B,EAAE;IAC9C,IAAI4D,aAAqB;IACzB,MAAMC,UAAU,GAAGvF,YAAY,CAASD,OAAO,CAACyF,GAAG,EAAE,CAAC;IACrDD,UAA8B,CAACE,KAAK,GAAG,MAAK;MAC3C,IAAIH,aAAa,EAAE;QAChBA,aAAiC,CAACG,KAAK,EAAE;;IAE9C,CAAC;IACD,MAAMC,aAAa,GAAG,IAAInE,QAAA,CAAAoE,SAAS,CAAC;MAClCC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAI;QACvCA,QAAQ,CAAC,IAAI,EAAErF,OAAA,CAAAC,KAAK,CAACwE,gBAAgB,CAACU,KAAK,CAAC,CAAC;MAC/C;KACD,CAAC;IACFP,UAAU,CAACU,IAAI,CAAC,SAAS,EAAE,MAAK;MAC9B,IAAI,CAACzD,IAAI,CAACsC,YAAY,EAAE,CAACoB,IAAI,CAACxD,SAAS,IAAG;QACxC,IAAI,CAACA,SAAS,GAAGA,SAAS;QAC1B,IAAIhB,OAAO,CAACyE,GAAG,EAAE;UACf,IAAIzE,OAAO,CAACiD,MAAM,EAAE;YAClBjD,OAAO,CAACiD,MAAM,GAAG,IAAIjD,OAAO,CAACiD,MAAM,kBAAkB9D,YAAA,CAAAE,aAAa,CAChE,IAAI,CAAC2B,SAAS,EACdhB,OAAO,CAACyE,GAAG,CACZ,GAAG;WACL,MAAM;YACLzE,OAAO,CAACiD,MAAM,GAAG,YAAY9D,YAAA,CAAAE,aAAa,CACxC,IAAI,CAAC2B,SAAS,EACdhB,OAAO,CAACyE,GAAG,CACZ,GAAG;;UAEN,OAAOzE,OAAO,CAACyE,GAAG;;QAEpB,MAAM5C,OAAO,GAAG1D,MAAM,CACpB;UACEuE,OAAO,EAAE;SACV,EACD1C,OAAO,CACR;QACD6B,OAAO,CAACsB,aAAa,GAAGjF,MAAM,CAAC2D,OAAO,CAACsB,aAAc,CAAC;QACtDtB,OAAO,CAACsB,aAAa,CAAC1C,IAAI,CAAC,YAAY,IAAI,CAACO,SAAS,EAAE,CAAC;QACxD,OAAOa,OAAO,CAACyB,YAAY;QAC3B,OAAOzB,OAAO,CAACI,UAAU;QACzB,MAAMA,UAAU,GAAG9D,MAAM,CACvB;UACEmF,YAAY,EAAEtD,OAAO,CAACsD;SACvB,EACDtD,OAAO,CAACiC,UAAU,CACnB;QAED,IAAIyC,SAAyC;QAC7Cd,aAAa,GAAGtF,YAAY,CAC1B,IAAIuB,QAAA,CAAA8E,WAAW,CAAC;UAACT,UAAU,EAAE;QAAI,CAAC,CAAC,CACpC;QACAN,aAAiC,CAACG,KAAK,GAAG,MAAK;UAC9C,IAAIW,SAAS,IAAIA,SAAS,CAACE,MAAM,EAAE;YACjCF,SAAS,CAACE,MAAM,EAAE;;QAEtB,CAAC;QACD;QACA,IAAI,CAAEC,MAAc,CAACC,kBAAkB,EAAE;UACvClB,aAAa,CAACW,IAAI,CAAC,SAAS,EAAE,MAAK;YACjC,IAAI;cACFG,SAAS,GAAG,IAAI,CAACxD,cAAc,CAAC6D,oBAAoB,CAClDlD,OAAO,EACPI,UAAU,CACX;aACF,CAAC,OAAO+C,KAAK,EAAE;cACdpB,aAAa,CAACqB,OAAO,CAACD,KAAK,CAAC;cAC5B;;YAEFN,SAAS,CACNQ,EAAE,CAAC,OAAO,EAAEC,GAAG,IAAG;cACjBvB,aAAa,CAACqB,OAAO,CAACE,GAAG,CAAC;YAC5B,CAAC,CAAC,CACDC,IAAI,CAACxB,aAAa,CAAC;YACtB;UACF,CAAC,CAAC;;QAEJ;QACCC,UAAkB,CAACwB,WAAW,CAACzB,aAAa,EAAEI,aAAa,CAAC;MAC/D,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOH,UAAU;EACnB;EAEA;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCAyB,WAAWA,CAACtF,OAAA,GAA8B,EAAE;IAC1C,MAAM6D,UAAU,GAAGvF,YAAY,CAASD,OAAO,CAACyF,GAAG,EAAE,CAAC;IAEtD;IACA,IAAIY,SAAuC;IAE1Cb,UAA8B,CAACE,KAAK,GAAG,MAAK;MAC3C,IAAIW,SAAS,IAAIA,SAAS,CAACE,MAAM,EAAE;QACjCF,SAAS,CAACE,MAAM,EAAE;;IAEtB,CAAC;IAED,MAAMW,eAAe,GAAG,IAAI1F,QAAA,CAAAoE,SAAS,CAAC;MACpCC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAI;QACvCA,QAAQ,CACN,IAAI,EACJ,CAAC,MAAK;UACJ,MAAMkB,gBAAgB,GAAY,EAAE;UACpCpB,KAAK,CAACZ,OAAO,CAACiC,OAAO,CAAEpD,KAAiC,IAAI;YAC1DmD,gBAAgB,CAAC/E,IAAI,CAACxB,OAAA,CAAAC,KAAK,CAACwE,gBAAgB,CAACrB,KAAK,CAAC,CAAC;UACtD,CAAC,CAAC;UACF,MAAMF,IAAI,GAAwB;YAChCqB,OAAO,EAAEgC,gBAAgB;YACzBE,eAAe,EAAEtB,KAAK,CAACsB;WACxB;UACD,OAAOvD,IAAI;QACb,CAAC,EAAC,CAAE,CACL;MACH;KACD,CAAC;IAEF,IAAI,CAACrB,IAAI,CAACsC,YAAY,EAAE,CAACoB,IAAI,CAACxD,SAAS,IAAG;MACxC,IAAI,CAACA,SAAS,GAAGA,SAAS;MAE1B,IAAIhB,OAAO,CAACyE,GAAG,EAAE;QACf,IAAIzE,OAAO,CAACiD,MAAM,EAAE;UAClBjD,OAAO,CAACiD,MAAM,GAAG,IAAIjD,OAAO,CAACiD,MAAM,kBAAkB9D,YAAA,CAAAE,aAAa,CAChE,IAAI,CAAC2B,SAAS,EACdhB,OAAO,CAACyE,GAAG,CACZ,GAAG;SACL,MAAM;UACLzE,OAAO,CAACiD,MAAM,GAAG,YAAY9D,YAAA,CAAAE,aAAa,CACxC,IAAI,CAAC2B,SAAS,EACdhB,OAAO,CAACyE,GAAG,CACZ,GAAG;;;MAGRzE,OAAO,CAACmD,aAAa,GAAGjF,MAAM,CAAC8B,OAAO,CAACmD,aAAa,CAAC;MACrDnD,OAAO,CAACmD,aAAa,CAAC1C,IAAI,CAAC,YAAY,IAAI,CAACO,SAAS,EAAE,CAAC;MACxD,MAAM2E,YAAY,GAAG;QACnBxC,aAAa,EAAEnD,OAAO,CAACmD,aAAa;QACpC,IAAInD,OAAO,CAACiD,MAAM,IAAI;UAACA,MAAM,EAAEjD,OAAO,CAACiD;QAAM,CAAC,CAAC;QAC/C,IAAIjD,OAAO,CAAC4F,YAAY,IAAI;UAACC,YAAY,EAAE7F,OAAO,CAAC4F;QAAY,CAAC;OACjE;MAED;MACA,IAAI,CAAEf,MAAc,CAACC,kBAAkB,EAAE;QACvCJ,SAAS,GAAG,IAAI,CAACxD,cAAc,CAAC4E,cAAc,CAAC9F,OAAO,CAACiC,UAAU,CAAC;QAClE;QACAyC,SAAS,CAACqB,KAAK,CAACJ,YAAY,CAAC;QAC7B;QACC9B,UAAkB,CAACwB,WAAW,CAACX,SAAS,EAAEa,eAAe,CAAC;;IAE/D,CAAC,CAAC;IAEF,OAAO1B,UAAU;EACnB;EA6EA,MAAMmC,OAAOA,CACXvD,IAAuC;IAEvC,MAAMzC,OAAO,GAAGyC,IAAI,GAAIA,IAAwB,GAAG,EAAE;IACrD,IAAI,CAACzB,SAAS,GAAG,MAAM,IAAI,CAACF,IAAI,CAACsC,YAAY,EAAE;IAC/C,MAAMvB,OAAO,GAAG1D,MAAM,CAAC,EAAE,EAAE6B,OAAO,EAAE;MAClC8B,MAAM,EAAE,WAAW,GAAG,IAAI,CAACd;KAC5B,CAAC;IACF,OAAOa,OAAO,CAACyB,YAAY;IAC3B,OAAOzB,OAAO,CAACI,UAAU;IACzB,MAAMA,UAAU,GAAG9D,MAAM,CACvB;MACEmF,YAAY,EAAEtD,OAAO,CAACsD;KACvB,EACDtD,OAAO,CAACiC,UAAU,CACnB;IACD,MAAME,IAAI,GAAG,MAAM,IAAI,CAACjB,cAAc,CAAC+E,QAAQ,CAACpE,OAAO,EAAEI,UAAU,CAAC;IACpE,MAAM,CAACiE,IAAI,CAAC,GAAG/D,IAAI;IACnB,IAAI+D,IAAI,EAAE;MACR/D,IAAI,CAAC,CAAC,CAAC,GAAG+D,IAAI,CAACzC,GAAG,CAAE0C,OAAe,IAAK,IAAI,CAAC1B,GAAG,CAAC0B,OAAO,CAAC,CAAC;;IAE5D,OAAOhE,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCAiE,aAAaA,CAACpG,OAAA,GAA0B,EAAE;IACxCA,OAAO,GAAGA,OAAO,IAAI,EAAE;IACvB,IAAI4D,aAAqB;IACzB,MAAMC,UAAU,GAAGvF,YAAY,CAASD,OAAO,CAACyF,GAAG,EAAE,CAAC;IACrDD,UAA8B,CAACE,KAAK,GAAG,MAAK;MAC3C,IAAIH,aAAa,EAAE;QAChBA,aAAiC,CAACG,KAAK,EAAE;;IAE9C,CAAC;IACD,MAAMsC,WAAW,GAAG,IAAIxG,QAAA,CAAAoE,SAAS,CAAC;MAChCC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAI;QACvCA,QAAQ,CAAC,IAAI,EAAE,IAAI,CAACG,GAAG,CAACL,KAAK,CAAC,CAAC;MACjC;KACD,CAAC;IACFP,UAAU,CAACU,IAAI,CAAC,SAAS,EAAE,MAAK;MAC9B,IAAI,CAACzD,IAAI,CAACsC,YAAY,EAAE,CAACoB,IAAI,CAACxD,SAAS,IAAG;QACxC,IAAI,CAACA,SAAS,GAAGA,SAAS;QAC1B,MAAMa,OAAO,GAAG1D,MAAM,CAAC,EAAE,EAAE6B,OAAO,EAAE;UAClC8B,MAAM,EAAE,WAAW,GAAG,IAAI,CAACd;SAC5B,CAAC;QACF,OAAOa,OAAO,CAACI,UAAU;QACzB,MAAMA,UAAU,GAAG9D,MAAM,CACvB;UACEmF,YAAY,EAAEtD,OAAO,CAACsD;SACvB,EACDtD,OAAO,CAACiC,UAAU,CACnB;QAED,IAAIyC,SAAoC;QACxCd,aAAa,GAAGtF,YAAY,CAC1B,IAAIuB,QAAA,CAAA8E,WAAW,CAAC;UAACT,UAAU,EAAE;QAAI,CAAC,CAAC,CACpC;QACAN,aAAiC,CAACG,KAAK,GAAG,MAAK;UAC9C,IAAIW,SAAS,IAAIA,SAAS,CAACE,MAAM,EAAE;YACjCF,SAAS,CAACE,MAAM,EAAE;;QAEtB,CAAC;QACDhB,aAAa,CAACW,IAAI,CAAC,SAAS,EAAE,MAAK;UACjC,IAAI;YACFG,SAAS,GAAG,IAAI,CAACxD,cAAc,CAACoF,cAAc,CAACzE,OAAO,EAAEI,UAAU,CAAC;WACpE,CAAC,OAAO+C,KAAK,EAAE;YACdpB,aAAa,CAACqB,OAAO,CAACD,KAAK,CAAC;YAC5B;;UAEFN,SAAS,CACNQ,EAAE,CAAC,OAAO,EAAEC,GAAG,IAAG;YACjBvB,aAAa,CAACqB,OAAO,CAACE,GAAG,CAAC;UAC5B,CAAC,CAAC,CACDC,IAAI,CAACxB,aAAa,CAAC;UACtB;QACF,CAAC,CAAC;QACF;QACCC,UAAkB,CAACwB,WAAW,CAACzB,aAAa,EAAEyC,WAAW,CAAC;MAC7D,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOxC,UAAU;EACnB;EA6DA,MAAM0C,QAAQA,CACZ9D,IAAyC;IAEzC,MAAMzC,OAAO,GAAGyC,IAAI,GAAIA,IAAwB,GAAG,EAAE;IACrD,IAAI,CAACzB,SAAS,GAAG,MAAM,IAAI,CAACF,IAAI,CAACsC,YAAY,EAAE;IAC/C,MAAMvB,OAAO,GAAG1D,MAAM,CAAC,EAAE,EAAE6B,OAAO,EAAE;MAClC8B,MAAM,EAAE,WAAW,GAAG,IAAI,CAACd;KAC5B,CAAC;IACF,OAAOa,OAAO,CAACyB,YAAY;IAC3B,OAAOzB,OAAO,CAACI,UAAU;IACzB,MAAMA,UAAU,GAAG9D,MAAM,CACvB;MACEmF,YAAY,EAAEtD,OAAO,CAACsD;KACvB,EACDtD,OAAO,CAACiC,UAAU,CACnB;IACD,MAAME,IAAI,GAAG,MAAM,IAAI,CAAClB,aAAa,CAACuF,SAAS,CAAC3E,OAAO,EAAEI,UAAU,CAAC;IACpE,MAAM,CAACwE,KAAK,CAAC,GAAGtE,IAAI;IACpB,IAAIsE,KAAK,EAAE;MACTtE,IAAI,CAAC,CAAC,CAAC,GAAGsE,KAAK,CAAChD,GAAG,CAAE1B,IAAa,IAAI;QACpC,MAAM2E,YAAY,GAAG,IAAI,CAAC3E,IAAI,CAACA,IAAI,CAACX,IAAK,CAAC;QAC1CsF,YAAY,CAACtE,QAAQ,GAAGL,IAAI;QAC5B,OAAO2E,YAAY;MACrB,CAAC,CAAC;;IAEJ,OAAOvE,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCAwE,cAAcA,CAAC3G,OAAwB;IACrC;IACA,MAAM4G,IAAI,GAAG,IAAI;IACjB5G,OAAO,GAAGA,OAAO,IAAI,EAAE;IACvB,IAAI4D,aAAqB;IACzB,MAAMC,UAAU,GAAGvF,YAAY,CAASD,OAAO,CAACyF,GAAG,EAAE,CAAC;IACrDD,UAA8B,CAACE,KAAK,GAAG,MAAK;MAC3C,IAAIH,aAAa,EAAE;QAChBA,aAAiC,CAACG,KAAK,EAAE;;IAE9C,CAAC;IACD,MAAM8C,YAAY,GAAG,IAAIhH,QAAA,CAAAoE,SAAS,CAAC;MACjCC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAI;QACvC,MAAMoC,YAAY,GAAGE,IAAI,CAAC7E,IAAI,CAACqC,KAAK,CAAChD,IAAI,CAAC;QAC1CsF,YAAY,CAACtE,QAAQ,GAAGgC,KAAK;QAC7BE,QAAQ,CAAC,IAAI,EAAEoC,YAAY,CAAC;MAC9B;KACD,CAAC;IACF7C,UAAU,CAACU,IAAI,CAAC,SAAS,EAAE,MAAK;MAC9B,IAAI,CAACzD,IAAI,CAACsC,YAAY,EAAE,CAACoB,IAAI,CAACxD,SAAS,IAAG;QACxC,IAAI,CAACA,SAAS,GAAGA,SAAS;QAC1B,MAAMa,OAAO,GAAG1D,MAAM,CAAC,EAAE,EAAE6B,OAAO,EAAE;UAClC8B,MAAM,EAAE,WAAW,GAAG8E,IAAI,CAAC5F;SAC5B,CAAC;QACF,OAAOa,OAAO,CAACI,UAAU;QACzB,MAAMA,UAAU,GAAG9D,MAAM,CACvB;UACEmF,YAAY,EAAEtD,OAAO,CAACsD;SACvB,EACDtD,OAAO,CAACiC,UAAU,CACnB;QAED,IAAIyC,SAAwC;QAC5Cd,aAAa,GAAGtF,YAAY,CAC1B,IAAIuB,QAAA,CAAA8E,WAAW,CAAC;UAACT,UAAU,EAAE;QAAI,CAAC,CAAC,CACpC;QACAN,aAAiC,CAACG,KAAK,GAAG,MAAK;UAC9C,IAAIW,SAAS,IAAIA,SAAS,CAACE,MAAM,EAAE;YACjCF,SAAS,CAACE,MAAM,EAAE;;QAEtB,CAAC;QACD;QACA,IAAI,CAAEC,MAAc,CAACC,kBAAkB,EAAE;UACvClB,aAAa,CAACW,IAAI,CAAC,SAAS,EAAE,MAAK;YACjC,IAAI;cACFG,SAAS,GAAG,IAAI,CAACzD,aAAa,CAAC6F,eAAe,CAC5CjF,OAAO,EACPI,UAAU,CACX;aACF,CAAC,OAAO+C,KAAK,EAAE;cACdpB,aAAa,CAACqB,OAAO,CAACD,KAAK,CAAC;cAC5B;;YAEFN,SAAS,CACNQ,EAAE,CAAC,OAAO,EAAEC,GAAG,IAAG;cACjBvB,aAAa,CAACqB,OAAO,CAACE,GAAG,CAAC;YAC5B,CAAC,CAAC,CACDC,IAAI,CAACxB,aAAa,CAAC;YACtB;UACF,CAAC,CAAC;;QAEJ;QACCC,UAAkB,CAACwB,WAAW,CAACzB,aAAa,EAAEiD,YAAY,CAAC;MAC9D,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOhD,UAAU;EACnB;EAEA;;;;;;;;;;;;;;;;;;EAkBAY,GAAGA,CAACrD,IAAY,EAAEpB,OAAoB;IACpC,OAAO,IAAIT,KAAA,CAAAC,GAAG,CAAC,IAAI,EAAE4B,IAAI,EAAEpB,OAAO,CAAC;EACrC;EAEA;;;;;;;;;;;;;;;;;;;;EAoBA+G,OAAOA,CAAC3F,IAAY,EAAE4F,SAAoB;IACxC,OAAO,IAAIvH,UAAA,CAAAC,OAAO,CAAC,IAAI,EAAE0B,IAAI,EAAE4F,SAAS,CAAC;EAC3C;EAEA;;;;;;;;;;;;;;;EAeAjF,IAAIA,CAACX,IAAY;IACf,OAAO,IAAIzB,MAAA,CAAAC,IAAI,CAAC,IAAI,EAAEwB,IAAI,CAAC;EAC7B;EAEA;;;;;;;;;;EAUA;EACA6F,OAAOA,CACL5F,MAAqB,EACrBiD,QAAqC;IAErC;IACA,MAAMsC,IAAI,GAAG,IAAI;IACjB,MAAMM,YAAY,GAAG,CAAC5C,QAAQ;IAC9B,IAAII,SAAmD;IACvD,IAAIyC,MAAc;IAClB,IAAID,YAAY,EAAE;MAChBC,MAAM,GAAG7I,YAAY,CAAS,IAAIuB,QAAA,CAAA8E,WAAW,CAAC;QAACT,UAAU,EAAE;MAAI,CAAC,CAAC,CAAC;MACjEiD,MAA0B,CAACpD,KAAK,GAAG,MAAK;QACvC,IAAIW,SAAS,IAAIA,SAAS,CAACE,MAAM,EAAE;UACjCF,SAAS,CAACE,MAAM,EAAE;;MAEtB,CAAC;MACDuC,MAAM,CAAC5C,IAAI,CAAC,SAAS,EAAE6C,iBAAiB,CAAC;KAC1C,MAAM;MACLC,mBAAmB,EAAE;;IAEvB,SAASC,iBAAiBA,CAAChD,QAA4B;MACrDsC,IAAI,CAAC9F,IAAI,CAACsC,YAAY,CAAC,CAAC+B,GAAG,EAAEnE,SAAS,KAAI;QACxC,IAAImE,GAAG,EAAE;UACPb,QAAQ,CAACa,GAAG,CAAC;UACb;;QAEFyB,IAAI,CAAC5F,SAAS,GAAGA,SAAU;QAC3B,IAAIuG,SAAS,GAAGX,IAAI,CAAC/F,GAAG,CAACQ,MAAM,CAACmG,MAAM,CAAC;QACvC,IAAI,CAACD,SAAS,EAAE;UACd;UACAA,SAAS,GAAG,IAAIvI,EAAE,CAACqC,MAAM,CAACmG,MAAM,CAAC,CAACZ,IAAI,CAAC5G,OAAO,CAAC;UAC/C4G,IAAI,CAAC/F,GAAG,CAACQ,MAAM,CAACmG,MAAM,CAAC,GAAGD,SAAS;;QAErC,IAAI1F,OAAO,GAAG1D,MAAM,CAAC,IAAI,EAAE,EAAE,EAAEkD,MAAM,CAACQ,OAAO,CAAC;QAC9CA,OAAO,GAAG7D,YAAA,CAAAyJ,qBAAqB,CAAC5F,OAAO,EAAEb,SAAU,CAAC;QACpD,MAAM0G,SAAS,GAAGH,SAAS,CAAClG,MAAM,CAACsG,MAAM,CAAC,CAACC,IAAI,CAC7CL,SAAS,EACT1F,OAAO,EACPR,MAAM,CAACwG,OAAO,CACf;QACDvD,QAAQ,CAAC,IAAI,EAAEoD,SAAS,CAAC;MAC3B,CAAC,CAAC;IACJ;IACA,SAASL,mBAAmBA,CAAA;MAC1B;MACA,IAAKxC,MAAc,CAACC,kBAAkB,EAAE;QACtC;;MAEFwC,iBAAiB,CAAC,CAACnC,GAAG,EAAEuC,SAAS,KAAI;QACnC,IAAIvC,GAAG,EAAE;UACPb,QAAS,CAACa,GAAG,CAAC;UACd;;QAEFuC,SAAU,CAACpD,QAAQ,CAAC;MACtB,CAAC,CAAC;IACJ;IACA,SAAS8C,iBAAiBA,CAAA;MACxB;MACA,IAAKvC,MAAc,CAACC,kBAAkB,EAAE;QACtC,OAAO,IAAIjF,QAAA,CAAA8E,WAAW,CAAC;UAACT,UAAU,EAAE;QAAI,CAAC,CAAC;;MAE5CoD,iBAAiB,CAAC,CAACnC,GAAG,EAAEuC,SAAS,KAAI;QACnC,IAAIvC,GAAG,EAAE;UACPgC,MAAM,CAAClC,OAAO,CAACE,GAAG,CAAC;UACnB;;QAEFT,SAAS,GAAGgD,SAAU,EAAE;QACxBhD,SAAS,CACNQ,EAAE,CAAC,OAAO,EAAEC,GAAG,IAAG;UACjBgC,MAAM,CAAClC,OAAO,CAACE,GAAG,CAAC;QACrB,CAAC,CAAC,CACDC,IAAI,CAAC+B,MAAM,CAAC;MACjB,CAAC,CAAC;MACF;IACF;IACA,OAAOA,MAAO;EAChB;EAEA;;;;;;;;;EASA,MAAMvF,gBAAgBA,CAACP,MAAyB;IAC9C,MAAMyG,MAAM,GAAGzG,MAAM,CAACI,WAAqB;IAC3C;IACA,MAAOqG,MAAM,CAACC,GAAG,CAACC,MAAc,CAACC,QAAQ,CAAC,uBAAuB,CAAC;IAClE5G,MAAM,CAACI,WAAW,GAAG,yBAAyB,GAAGqG,MAAM,CAAC1G,IAAI;EAC9D;EAEA;;;;;;;;;EASA,MAAMM,iBAAiBA,CAACL,MAAyB;IAC/C,MAAM6G,OAAO,GAAG7G,MAAM,CAACI,WAAsB;IAC7C,MAAM,CAACW,QAAQ,CAAC,GAAG,MAAM8F,OAAO,CAACC,WAAW,EAAE;IAC9C;IACA,MAAMC,MAAM,GAAI,EAAY,CAACC,KAAK,CAACC,IAAI,CAACpK,MAAM,CAACkE,QAAQ,CAACgG,MAAM,CAAC,CAAC;IAChEA,MAAM,CAAC3H,IAAI,CAAC;MACV8H,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE;KACf,CAAC;IACF,MAAMN,OAAO,CAACO,WAAW,CAAC;MACxBL;KACD,CAAC;IACF,MAAMM,OAAO,GAAG,yBAAyB;IACzC,MAAMC,GAAG,GAAIT,OAAO,CAACpG,MAAmB,CAACd,SAAS;IAClD,MAAM4H,GAAG,GAAGV,OAAO,CAACW,EAAE;IACtBxH,MAAM,CAACI,WAAW,GAAG,GAAGiH,OAAO,aAAaC,GAAG,aAAaC,GAAG,EAAE;EACnE;EAEA;;;;;;;;;EASA,MAAMjH,eAAeA,CAACN,MAAyB;IAC7C,MAAMyH,KAAK,GAAGzH,MAAM,CAACI,WAAoB;IACzC,MAAM,CAACsH,MAAM,CAAC,GAAG,MAAMD,KAAK,CAACE,GAAG,CAACC,SAAS,EAAE;IAC5CF,MAAM,CAACG,QAAQ,GAAGhL,MAAM,CAAC6K,MAAM,CAACG,QAAS,CAAC;IAC1CH,MAAO,CAACG,QAAQ,CAACzI,IAAI,CAAC;MACpB8H,IAAI,EAAE,wBAAwB;MAC9BY,OAAO,EAAE,CAAC,sDAAsD;KACjE,CAAC;IACF,MAAML,KAAK,CAACE,GAAG,CAACI,SAAS,CAACL,MAAM,CAAC;IACjC,MAAML,OAAO,GAAG,uBAAuB;IACvC,MAAMW,SAAS,GAAGP,KAAK,CAAC1H,IAAI;IAC5BC,MAAM,CAACI,WAAW,GAAG,GAAGiH,OAAO,IAAIW,SAAS,EAAE;EAChD;EAEA;;;;;EAKA;EACA,MAAMnH,YAAYA,CAACL,OAAY;IAC7B,IAAI,IAAI,CAACb,SAAS,KAAK,eAAe,EACpC,IAAI,CAACA,SAAS,GAAG,MAAM,IAAI,CAACF,IAAI,CAACsC,YAAY,EAAE;IACjD,IAAIvB,OAAO,EAAEA,OAAO,GAAG7D,YAAA,CAAAyJ,qBAAqB,CAAC5F,OAAO,EAAE,IAAI,CAACb,SAAS,CAAC;EACvE;EAEA;;;;;EAKA,MAAMsI,mBAAmBA,CAAA;IACvB,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MAC1B,IAAI,CAACA,gBAAgB,GAAG,MAAM9K,UAAA,CAAA+K,kBAAkB,CAC9C,IAAI,CAAC1I,IAA6B,CACnC;;EAEL;;AAyGMtC,OAAA,CAAAsB,OAAA,GAAAA,OAAA;AAtGR;;;;AAIA7B,WAAA,CAAAwL,cAAc,CAAC3J,OAAO,EAAE;EACtB4J,OAAO,EAAE,CAAC,SAAS;CACpB,CAAC;AAEF;;;;AAIA3L,WAAA,CAAA4L,SAAS,CAACxL,MAAM,CAAC2B,OAAO,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AA4FhE;;;;;;;;;;;AAWA8J,MAAM,CAACpL,OAAO,CAACQ,EAAE,GAAGA,EAAE;AACtB,MAAA6K,MAAA,GAAA/L,OAAA;AACQU,OAAA,CAAAqL,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}