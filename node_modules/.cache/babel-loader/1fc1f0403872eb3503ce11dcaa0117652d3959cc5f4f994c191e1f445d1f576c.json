{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectServiceContext = exports.getDefaultResource = exports.getGlobalDescriptor = exports.getGKEDescriptor = exports.KUBERNETES_NAMESPACE_ID_PATH = exports.getGCEDescriptor = exports.getGAEDescriptor = exports.getCloudRunDescriptor = exports.getCloudFunctionDescriptor = void 0;\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst util_1 = require(\"util\");\nconst readFile = util_1.promisify(fs.readFile);\nfunction zoneFromQualifiedZone(qualified) {\n  // Some parsing is necessary. Metadata service returns a fully\n  // qualified zone name: 'projects/{projectId}/zones/{zone}'. Logging\n  // wants just the zone part.\n  //\n  return qualified.split('/').pop();\n}\nfunction regionFromQualifiedZone(qualified) {\n  // Parses the region from the zone. Used for GCF and GCR which dynamically\n  // allocate zones.\n  const zone = zoneFromQualifiedZone(qualified);\n  const region = zone === undefined ? undefined : zone.slice(0, zone.lastIndexOf('-'));\n  return region;\n}\n/**\n * Create a descriptor for Cloud Functions.\n *\n * @returns {object}\n */\nasync function getCloudFunctionDescriptor() {\n  // If the region is already available via an environment variable, don't delay the function by pinging metaserver.\n  let region = undefined;\n  if (!(process.env.GOOGLE_CLOUD_REGION || process.env.FUNCTION_REGION)) {\n    const qualifiedZone = await gcpMetadata.instance('zone');\n    region = regionFromQualifiedZone(qualifiedZone);\n  }\n  /**\n   * In GCF versions after Node 8, K_SERVICE is the preferred way to\n   * get the function name. We still check for GOOGLE_CLOUD_REGION and FUNCTION_REGION for backwards Node runtime compatibility.\n   */\n  return {\n    type: 'cloud_function',\n    labels: {\n      function_name: process.env.K_SERVICE || process.env.FUNCTION_NAME,\n      region: process.env.GOOGLE_CLOUD_REGION || process.env.FUNCTION_REGION || region\n    }\n  };\n}\nexports.getCloudFunctionDescriptor = getCloudFunctionDescriptor;\n/**\n * Create a descriptor for Cloud Run.\n *\n * @returns {object}\n */\nasync function getCloudRunDescriptor() {\n  const qualifiedZone = await gcpMetadata.instance('zone');\n  const location = regionFromQualifiedZone(qualifiedZone);\n  return {\n    type: 'cloud_run_revision',\n    labels: {\n      location,\n      service_name: process.env.K_SERVICE,\n      revision_name: process.env.K_REVISION,\n      configuration_name: process.env.K_CONFIGURATION\n    }\n  };\n}\nexports.getCloudRunDescriptor = getCloudRunDescriptor;\n/**\n * Create a descriptor for Google App Engine.\n *\n * @returns {object}\n */\nasync function getGAEDescriptor() {\n  const qualifiedZone = await gcpMetadata.instance('zone');\n  const zone = zoneFromQualifiedZone(qualifiedZone);\n  return {\n    type: 'gae_app',\n    labels: {\n      module_id: process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME,\n      version_id: process.env.GAE_VERSION,\n      zone\n    }\n  };\n}\nexports.getGAEDescriptor = getGAEDescriptor;\n/**\n * Create a descriptor for Google Compute Engine.\n * @return {object}\n */\nasync function getGCEDescriptor() {\n  const idResponse = await gcpMetadata.instance('id');\n  const zoneResponse = await gcpMetadata.instance('zone');\n  // Some parsing is necessary. Metadata service returns a fully\n  // qualified zone name: 'projects/{projectId}/zones/{zone}'. Logging\n  // wants just the zone part.\n  //\n  const zone = zoneFromQualifiedZone(zoneResponse);\n  return {\n    type: 'gce_instance',\n    labels: {\n      // idResponse can be BigNumber when the id too large for JavaScript\n      // numbers. Use a toString() to uniformly convert to a string.\n      instance_id: idResponse.toString(),\n      zone\n    }\n  };\n}\nexports.getGCEDescriptor = getGCEDescriptor;\nexports.KUBERNETES_NAMESPACE_ID_PATH = '/var/run/secrets/kubernetes.io/serviceaccount/namespace';\n/**\n * Create a descriptor for Google Container Engine.\n *\n * @return {object}\n */\nasync function getGKEDescriptor() {\n  // Cloud Logging Monitored Resource for 'container' requires\n  // cluster_name and namespace_id fields. Note that these *need* to be\n  // snake_case. The namespace_id is not easily available from inside the\n  // container, but we can get the namespace_name. Logging has been using the\n  // namespace_name in place of namespace_id for a while now. Log correlation\n  // with metrics may not necessarily work however.\n  //\n  const resp = await gcpMetadata.instance('attributes/cluster-name');\n  const qualifiedZone = await gcpMetadata.instance('zone');\n  const location = zoneFromQualifiedZone(qualifiedZone);\n  let namespace = '';\n  try {\n    namespace = await readFile(exports.KUBERNETES_NAMESPACE_ID_PATH, 'utf8');\n  } catch (err) {\n    // Ignore errors (leave namespace as a nil string).\n  }\n  return {\n    type: 'k8s_container',\n    labels: {\n      location,\n      cluster_name: resp,\n      namespace_name: namespace,\n      pod_name: process.env.HOSTNAME,\n      // Users must manually supply container name for now.\n      // This may be autodetected in the future, pending b/145137070.\n      container_name: process.env.CONTAINER_NAME\n    }\n  };\n}\nexports.getGKEDescriptor = getGKEDescriptor;\n/**\n * Create a global descriptor.\n *\n * @returns {object}\n */\nfunction getGlobalDescriptor() {\n  return {\n    type: 'global'\n  };\n}\nexports.getGlobalDescriptor = getGlobalDescriptor;\n/**\n * Attempt to contact the metadata service and determine,\n * based on request success and environment variables, what type of resource\n * the library is operating on.\n */\nasync function getDefaultResource(auth) {\n  const env = await auth.getEnv();\n  switch (env) {\n    case google_auth_library_1.GCPEnv.KUBERNETES_ENGINE:\n      return getGKEDescriptor().catch(() => getGlobalDescriptor());\n    case google_auth_library_1.GCPEnv.APP_ENGINE:\n      return getGAEDescriptor().catch(() => getGlobalDescriptor());\n    case google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS:\n      return getCloudFunctionDescriptor().catch(() => getGlobalDescriptor());\n    case google_auth_library_1.GCPEnv.CLOUD_RUN:\n      return getCloudRunDescriptor().catch(() => getGlobalDescriptor());\n    case google_auth_library_1.GCPEnv.COMPUTE_ENGINE:\n      return getGCEDescriptor().catch(() => getGlobalDescriptor());\n    default:\n      return getGlobalDescriptor();\n  }\n}\nexports.getDefaultResource = getDefaultResource;\n/**\n * For logged errors, users can provide a service context. This enables errors\n * to be picked up Cloud Error Reporting. For more information see\n * [this guide]{@link\n * https://cloud.google.com/error-reporting/docs/formatting-error-messages} and\n * the [official documentation]{@link\n * https://cloud.google.com/error-reporting/reference/rest/v1beta1/ServiceContext}.\n */\nasync function detectServiceContext(auth) {\n  const env = await auth.getEnv();\n  switch (env) {\n    case google_auth_library_1.GCPEnv.APP_ENGINE:\n      return {\n        service: process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME,\n        version: process.env.GAE_VERSION || process.env.GAE_MODULE_VERSION\n      };\n    case google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS:\n      return {\n        service: process.env.FUNCTION_NAME\n      };\n    // On Kubernetes we use the pod-name to describe the service. Currently,\n    // we acquire the pod-name from within the pod through env var `HOSTNAME`.\n    case google_auth_library_1.GCPEnv.KUBERNETES_ENGINE:\n      return {\n        service: process.env.HOSTNAME\n      };\n    case google_auth_library_1.GCPEnv.CLOUD_RUN:\n      return {\n        service: process.env.K_SERVICE\n      };\n    case google_auth_library_1.GCPEnv.COMPUTE_ENGINE:\n      return null;\n    default:\n      return null;\n  }\n}\nexports.detectServiceContext = detectServiceContext;","map":{"version":3,"names":["fs","require","gcpMetadata","google_auth_library_1","util_1","readFile","promisify","zoneFromQualifiedZone","qualified","split","pop","regionFromQualifiedZone","zone","region","undefined","slice","lastIndexOf","getCloudFunctionDescriptor","process","env","GOOGLE_CLOUD_REGION","FUNCTION_REGION","qualifiedZone","instance","type","labels","function_name","K_SERVICE","FUNCTION_NAME","exports","getCloudRunDescriptor","location","service_name","revision_name","K_REVISION","configuration_name","K_CONFIGURATION","getGAEDescriptor","module_id","GAE_SERVICE","GAE_MODULE_NAME","version_id","GAE_VERSION","getGCEDescriptor","idResponse","zoneResponse","instance_id","toString","KUBERNETES_NAMESPACE_ID_PATH","getGKEDescriptor","resp","namespace","err","cluster_name","namespace_name","pod_name","HOSTNAME","container_name","CONTAINER_NAME","getGlobalDescriptor","getDefaultResource","auth","getEnv","GCPEnv","KUBERNETES_ENGINE","catch","APP_ENGINE","CLOUD_FUNCTIONS","CLOUD_RUN","COMPUTE_ENGINE","detectServiceContext","service","version","GAE_MODULE_VERSION"],"sources":["../../../src/utils/metadata.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}