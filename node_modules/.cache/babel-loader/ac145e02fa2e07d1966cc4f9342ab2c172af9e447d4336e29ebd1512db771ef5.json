{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getElectricityMapsData = exports.getEmissionsFactors = exports.zoneIntensityFactors = void 0;\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst index_1 = require(\"./index\");\nconst helpers_1 = require(\"./helpers\");\nexports.zoneIntensityFactors = {};\nconst getEmissionsFactors = async (region, dateTime, emissionsFactors, mappedRegionsToElectricityMapZones, logger) => {\n  const electricityMapsToken = (0, index_1.configLoader)().ELECTRICITY_MAPS_TOKEN;\n  const electricityMapsZone = mappedRegionsToElectricityMapZones[region];\n  if (!electricityMapsToken || !electricityMapsZone) {\n    if (electricityMapsToken && !electricityMapsZone) {\n      logger.warn(`Electricity Maps zone not found for ${region}. Using default emissions factors.`);\n    }\n    return emissionsFactors;\n  }\n  if (exports.zoneIntensityFactors[dateTime]?.[electricityMapsZone]) {\n    return {\n      [region]: exports.zoneIntensityFactors[dateTime][electricityMapsZone]\n    };\n  }\n  let response;\n  try {\n    response = await (0, exports.getElectricityMapsData)(electricityMapsZone, dateTime);\n  } catch (e) {\n    throw new Error(`Failed to get data from Electricity Maps. Reason ${e.message}.`);\n  }\n  if (!response?.carbonIntensity) {\n    logger.warn(`Electricity Maps zone data was not found for ${region}. Using default emissions factors.`);\n    return emissionsFactors;\n  }\n  if (exports.zoneIntensityFactors[dateTime]) {\n    exports.zoneIntensityFactors[dateTime][electricityMapsZone] = (0, helpers_1.convertGramsToMetricTons)(response.carbonIntensity);\n  } else {\n    exports.zoneIntensityFactors[dateTime] = {\n      [electricityMapsZone]: (0, helpers_1.convertGramsToMetricTons)(response.carbonIntensity)\n    };\n  }\n  return {\n    [region]: exports.zoneIntensityFactors[dateTime][electricityMapsZone]\n  };\n};\nexports.getEmissionsFactors = getEmissionsFactors;\nconst getElectricityMapsData = async (electricityMapsZone, dateTime) => {\n  try {\n    const url = `https://api.electricitymap.org/v3/carbon-intensity/past?zone=${electricityMapsZone}&datetime=${dateTime}`;\n    const res = await (0, node_fetch_1.default)(url, {\n      headers: {\n        'auth-token': (0, index_1.configLoader)().ELECTRICITY_MAPS_TOKEN\n      }\n    });\n    return await res.json();\n  } catch (e) {\n    throw new Error(`Electricity Maps request failed. Reason: ${e.message}.`);\n  }\n};\nexports.getElectricityMapsData = getElectricityMapsData;","map":{"version":3,"names":["node_fetch_1","__importDefault","require","index_1","helpers_1","exports","zoneIntensityFactors","getEmissionsFactors","region","dateTime","emissionsFactors","mappedRegionsToElectricityMapZones","logger","electricityMapsToken","configLoader","ELECTRICITY_MAPS_TOKEN","electricityMapsZone","warn","response","getElectricityMapsData","e","Error","message","carbonIntensity","convertGramsToMetricTons","url","res","default","headers","json"],"sources":["/Users/rhysgregory/node_modules/@cloud-carbon-footprint/common/src/EmissionsFactors.ts"],"sourcesContent":["/*\n * Â© 2023 Thoughtworks, Inc.\n */\n\nimport fetch from 'node-fetch'\nimport { CloudConstantsEmissionsFactors } from '@cloud-carbon-footprint/core'\nimport { configLoader, Logger } from './index'\nimport { convertGramsToMetricTons } from './helpers'\n\nexport type mappedRegionsToElectricityMapZones = {\n  [key: string]: string | null\n}\nexport const zoneIntensityFactors: {\n  [key: string]: { [key: string]: number }\n} = {}\n\nexport const getEmissionsFactors = async (\n  region: string,\n  dateTime: string,\n  emissionsFactors: CloudConstantsEmissionsFactors,\n  mappedRegionsToElectricityMapZones: mappedRegionsToElectricityMapZones,\n  logger: Logger,\n): Promise<CloudConstantsEmissionsFactors> => {\n  const electricityMapsToken = configLoader().ELECTRICITY_MAPS_TOKEN\n\n  const electricityMapsZone: string = mappedRegionsToElectricityMapZones[region]\n\n  // if there is no zone for the region, or no token, return the default emissions factor\n  if (!electricityMapsToken || !electricityMapsZone) {\n    if (electricityMapsToken && !electricityMapsZone) {\n      logger.warn(\n        `Electricity Maps zone not found for ${region}. Using default emissions factors.`,\n      )\n    }\n    return emissionsFactors\n  }\n\n  // if there is a cached value for the zone, return it\n  if (zoneIntensityFactors[dateTime]?.[electricityMapsZone]) {\n    return {\n      [region]: zoneIntensityFactors[dateTime][electricityMapsZone],\n    }\n  }\n\n  // if there is no cached value for the zone, make a request to electricity maps\n  let response\n  try {\n    response = await getElectricityMapsData(electricityMapsZone, dateTime)\n  } catch (e) {\n    throw new Error(\n      `Failed to get data from Electricity Maps. Reason ${e.message}.`,\n    )\n  }\n\n  // if there is no response, return the default emissions factor\n  if (!response?.carbonIntensity) {\n    // add a warning if there is no response\n    logger.warn(\n      `Electricity Maps zone data was not found for ${region}. Using default emissions factors.`,\n    )\n\n    return emissionsFactors\n  }\n\n  // cache the value for the zone\n  if (zoneIntensityFactors[dateTime]) {\n    // if there is a cached value for the date, add the new zone\n    zoneIntensityFactors[dateTime][electricityMapsZone] =\n      convertGramsToMetricTons(response.carbonIntensity)\n  } else {\n    // if there is no cached value for the date, create a new entry\n    zoneIntensityFactors[dateTime] = {\n      [electricityMapsZone]: convertGramsToMetricTons(response.carbonIntensity),\n    }\n  }\n\n  return {\n    [region]: zoneIntensityFactors[dateTime][electricityMapsZone],\n  }\n}\n\nexport const getElectricityMapsData = async (\n  electricityMapsZone: string,\n  dateTime: string,\n): Promise<any> => {\n  try {\n    const url = `https://api.electricitymap.org/v3/carbon-intensity/past?zone=${electricityMapsZone}&datetime=${dateTime}`\n    const res = await fetch(url, {\n      headers: {\n        'auth-token': configLoader().ELECTRICITY_MAPS_TOKEN,\n      },\n    })\n    return await res.json()\n  } catch (e) {\n    throw new Error(`Electricity Maps request failed. Reason: ${e.message}.`)\n  }\n}\n"],"mappings":";;;;;;;;;;;AAIA,MAAAA,YAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AAKaG,OAAA,CAAAC,oBAAoB,GAE7B,EAAE;AAEC,MAAMC,mBAAmB,GAAG,MAAAA,CACjCC,MAAc,EACdC,QAAgB,EAChBC,gBAAgD,EAChDC,kCAAsE,EACtEC,MAAc,KAC6B;EAC3C,MAAMC,oBAAoB,GAAG,IAAAV,OAAA,CAAAW,YAAY,GAAE,CAACC,sBAAsB;EAElE,MAAMC,mBAAmB,GAAWL,kCAAkC,CAACH,MAAM,CAAC;EAG9E,IAAI,CAACK,oBAAoB,IAAI,CAACG,mBAAmB,EAAE;IACjD,IAAIH,oBAAoB,IAAI,CAACG,mBAAmB,EAAE;MAChDJ,MAAM,CAACK,IAAI,CACT,uCAAuCT,MAAM,oCAAoC,CAClF;;IAEH,OAAOE,gBAAgB;;EAIzB,IAAIL,OAAA,CAAAC,oBAAoB,CAACG,QAAQ,CAAC,GAAGO,mBAAmB,CAAC,EAAE;IACzD,OAAO;MACL,CAACR,MAAM,GAAGH,OAAA,CAAAC,oBAAoB,CAACG,QAAQ,CAAC,CAACO,mBAAmB;KAC7D;;EAIH,IAAIE,QAAQ;EACZ,IAAI;IACFA,QAAQ,GAAG,MAAM,IAAAb,OAAA,CAAAc,sBAAsB,EAACH,mBAAmB,EAAEP,QAAQ,CAAC;GACvE,CAAC,OAAOW,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CACb,oDAAoDD,CAAC,CAACE,OAAO,GAAG,CACjE;;EAIH,IAAI,CAACJ,QAAQ,EAAEK,eAAe,EAAE;IAE9BX,MAAM,CAACK,IAAI,CACT,gDAAgDT,MAAM,oCAAoC,CAC3F;IAED,OAAOE,gBAAgB;;EAIzB,IAAIL,OAAA,CAAAC,oBAAoB,CAACG,QAAQ,CAAC,EAAE;IAElCJ,OAAA,CAAAC,oBAAoB,CAACG,QAAQ,CAAC,CAACO,mBAAmB,CAAC,GACjD,IAAAZ,SAAA,CAAAoB,wBAAwB,EAACN,QAAQ,CAACK,eAAe,CAAC;GACrD,MAAM;IAELlB,OAAA,CAAAC,oBAAoB,CAACG,QAAQ,CAAC,GAAG;MAC/B,CAACO,mBAAmB,GAAG,IAAAZ,SAAA,CAAAoB,wBAAwB,EAACN,QAAQ,CAACK,eAAe;KACzE;;EAGH,OAAO;IACL,CAACf,MAAM,GAAGH,OAAA,CAAAC,oBAAoB,CAACG,QAAQ,CAAC,CAACO,mBAAmB;GAC7D;AACH,CAAC;AA/DYX,OAAA,CAAAE,mBAAmB,GAAAA,mBAAA;AAiEzB,MAAMY,sBAAsB,GAAG,MAAAA,CACpCH,mBAA2B,EAC3BP,QAAgB,KACA;EAChB,IAAI;IACF,MAAMgB,GAAG,GAAG,gEAAgET,mBAAmB,aAAaP,QAAQ,EAAE;IACtH,MAAMiB,GAAG,GAAG,MAAM,IAAA1B,YAAA,CAAA2B,OAAK,EAACF,GAAG,EAAE;MAC3BG,OAAO,EAAE;QACP,YAAY,EAAE,IAAAzB,OAAA,CAAAW,YAAY,GAAE,CAACC;;KAEhC,CAAC;IACF,OAAO,MAAMW,GAAG,CAACG,IAAI,EAAE;GACxB,CAAC,OAAOT,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4CAA4CD,CAAC,CAACE,OAAO,GAAG,CAAC;;AAE7E,CAAC;AAfYjB,OAAA,CAAAc,sBAAsB,GAAAA,sBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}