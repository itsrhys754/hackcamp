{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Log = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst dotProp = require(\"dot-prop\");\nconst extend = require(\"extend\");\nconst entry_1 = require(\"./entry\");\nconst instrumentation_1 = require(\"./utils/instrumentation\");\nconst log_common_1 = require(\"./utils/log-common\");\n/**\n * A log is a named collection of entries, each entry representing a timestamped\n * event. Logs can be produced by Google Cloud Platform services, by third-party\n * services, or by your applications. For example, the log `apache-access` is\n * produced by the Apache Web Server, but the log\n * `compute.googleapis.com/activity_log` is produced by Google Compute Engine.\n *\n * See {@link https://cloud.google.com/logging/docs/basic-concepts#logs|Introduction to Logs}\n *\n * @class\n *\n * @param {Logging} logging {@link Logging} instance.\n * @param {string} name Name of the log.\n * @param {object} [options] Configuration object.\n * @param {boolean} [options.removeCircular] Replace circular references in\n *     logged objects with a string value, `[Circular]`. (Default: false)\n * @param {number} [options.maxEntrySize] A max entry size\n * @param {string[]} [options.jsonFieldsToTruncate] A list of JSON properties at the given full path to be truncated.\n *     Received values will be prepended to predefined list in the order received and duplicates discarded.\n * @param {ApiResponseCallback} [options.defaultWriteDeleteCallback] A default global callback to be used for {@link Log#write}\n *     and {@link Log#delete} APIs when {@link ApiResponseCallback} callback was not supplied by caller in function parameters.\n *     Note that {@link LogOptions#defaultWriteDeleteCallback} is useful when {@link Log#write} and {@link Log#delete} APIs are called\n *     without `await` and without callback added explicitly to every call - this way {@link LogOptions#defaultWriteDeleteCallback}\n *     can serve as global callback handler, which for example could be used to catch all errors and eliminate crashes.\n * @example\n * ```\n * import {Logging} from '@google-cloud/logging';\n * import {LogOptions} from '@google-cloud/logging/build/src/log';\n * const options: LogOptions = {\n *   maxEntrySize: 256,\n *   jsonFieldsToTruncate: [\n *     'jsonPayload.fields.metadata.structValue.fields.custom.stringValue',\n *   ],\n *   defaultWriteDeleteCallback: (err: any) => {\n *     if (err) {\n *       console.log('Error: ' + err);\n *     }\n *   },\n * };\n * const logging = new Logging();\n * const log = logging.log('syslog', options);\n * ```\n */\nclass Log {\n  constructor(logging, name, options) {\n    options = options || {};\n    this.formattedName_ = log_common_1.formatLogName(logging.projectId, name);\n    this.removeCircular_ = options.removeCircular === true;\n    this.maxEntrySize = options.maxEntrySize;\n    this.logging = logging;\n    /**\n     * @name Log#name\n     * @type {string}\n     */\n    this.name = this.formattedName_.split('/').pop();\n    this.jsonFieldsToTruncate = [\n    // Winston:\n    'jsonPayload.fields.metadata.structValue.fields.stack.stringValue',\n    // Bunyan:\n    'jsonPayload.fields.msg.stringValue', 'jsonPayload.fields.err.structValue.fields.stack.stringValue', 'jsonPayload.fields.err.structValue.fields.message.stringValue',\n    // All:\n    'jsonPayload.fields.message.stringValue'];\n    // Prepend all custom fields to be truncated to a list with defaults, thus\n    // custom fields will be truncated first. Make sure to filter out fields\n    // which are not in EntryJson.jsonPayload\n    if (options.jsonFieldsToTruncate !== null && options.jsonFieldsToTruncate !== undefined) {\n      const filteredList = options.jsonFieldsToTruncate.filter(str => str !== null && !this.jsonFieldsToTruncate.includes(str) && str.startsWith('jsonPayload'));\n      const uniqueSet = new Set(filteredList);\n      this.jsonFieldsToTruncate = Array.from(uniqueSet).concat(this.jsonFieldsToTruncate);\n    }\n    /**\n     * The default callback for {@link Log#write} and {@link Log#delete} APIs\n     * is going to be used only when {@link LogOptions#defaultWriteDeleteCallback}\n     * was set by user and only for APIs which does not accept a callback as parameter\n     */\n    this.defaultWriteDeleteCallback = options.defaultWriteDeleteCallback;\n  }\n  alert(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'ALERT'), options);\n  }\n  critical(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'CRITICAL'), options);\n  }\n  debug(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'DEBUG'), options);\n  }\n  async delete(gaxOptions) {\n    const projectId = await this.logging.auth.getProjectId();\n    this.formattedName_ = log_common_1.formatLogName(projectId, this.name);\n    const reqOpts = {\n      logName: this.formattedName_\n    };\n    return this.logging.loggingService.deleteLog(reqOpts, gaxOptions, this.defaultWriteDeleteCallback);\n  }\n  emergency(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'EMERGENCY'), options);\n  }\n  entry(metadataOrData, data) {\n    let metadata;\n    if (!data && metadataOrData !== null && Object.prototype.hasOwnProperty.call(metadataOrData, 'httpRequest')) {\n      // If user logs entry(metadata.httpRequest)\n      metadata = metadataOrData;\n      data = {};\n    } else if (!data) {\n      // If user logs entry(message)\n      data = metadataOrData;\n      metadata = {};\n    } else {\n      // If user logs entry(metadata, message)\n      metadata = metadataOrData;\n    }\n    return this.logging.entry(metadata, data);\n  }\n  error(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'ERROR'), options);\n  }\n  async getEntries(opts) {\n    const options = extend({}, opts);\n    const projectId = await this.logging.auth.getProjectId();\n    this.formattedName_ = log_common_1.formatLogName(projectId, this.name);\n    if (options.filter && !options.filter.includes('logName=')) {\n      options.filter = `(${options.filter}) AND logName=\"${this.formattedName_}\"`;\n    } else if (!options.filter) {\n      options.filter = `logName=\"${this.formattedName_}\"`;\n    }\n    return this.logging.getEntries(options);\n  }\n  /**\n   * This method is a wrapper around {module:logging#getEntriesStream}, but with\n   * a filter specified to only return {module:logging/entry} objects from this\n   * log.\n   *\n   * @method Log#getEntriesStream\n   * @param {GetEntriesRequest} [query] Query object for listing entries.\n   * @returns {ReadableStream} A readable stream that emits {@link Entry}\n   *     instances.\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.log('my-log');\n   *\n   * log.getEntriesStream()\n   *   .on('error', console.error)\n   *   .on('data', entry => {\n   *     // `entry` is a Cloud Logging entry object.\n   *     // See the `data` property to read the data from the entry.\n   *   })\n   *   .on('end', function() {\n   *     // All entries retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * log.getEntriesStream()\n   *   .on('data', function(entry) {\n   *     this.end();\n   *   });\n   * ```\n   */\n  getEntriesStream(options) {\n    options = extend({\n      log: this.name\n    }, options);\n    return this.logging.getEntriesStream(options);\n  }\n  /**\n   * This method is a wrapper around {module:logging#tailEntries}, but with\n   * a filter specified to only return {module:logging/entry} objects from this\n   * log.\n   *\n   * @method Log#tailEntries\n   * @param {TailEntriesRequest} [query] Query object for tailing entries.\n   * @returns {DuplexStream} A duplex stream that emits TailEntriesResponses\n   * containing an array of {@link Entry} instances.\n   *\n   * @example\n   * ```\n   * const {Logging} = require('@google-cloud/logging');\n   * const logging = new Logging();\n   * const log = logging.log('my-log');\n   *\n   * log.tailEntries()\n   *   .on('error', console.error)\n   *   .on('data', resp => {\n   *     console.log(resp.entries);\n   *     console.log(resp.suppressionInfo);\n   *   })\n   *   .on('end', function() {\n   *     // All entries retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * log.tailEntries()\n   *   .on('data', function(entry) {\n   *     this.end();\n   *   });\n   * ```\n   */\n  tailEntries(options) {\n    options = extend({\n      log: this.name\n    }, options);\n    return this.logging.tailEntries(options);\n  }\n  info(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'INFO'), options);\n  }\n  notice(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'NOTICE'), options);\n  }\n  warning(entry, options) {\n    return this.write(log_common_1.assignSeverityToEntries(entry, 'WARNING'), options);\n  }\n  async write(entry, opts) {\n    const isInfoAdded = instrumentation_1.getInstrumentationInfoStatus();\n    const options = opts ? opts : {};\n    // If instrumentation info was not added, means that this is first time\n    // log entry is written and that the instrumentation log entry could be\n    // generated for this request. If yes, then make sure we set partialSuccess, so entire\n    // request will make it through and only oversized entries will be dropped\n    if (!isInfoAdded) {\n      options.partialSuccess = true;\n    }\n    // Extract projectId & resource from Logging - inject & memoize if not.\n    await this.logging.setProjectId();\n    this.formattedName_ = log_common_1.formatLogName(this.logging.projectId, this.name);\n    const resource = await this.getOrSetResource(options);\n    // Extract & format additional context from individual entries. Make sure to add instrumentation info\n    const decoratedEntries = this.decorateEntries(instrumentation_1.populateInstrumentationInfo(entry));\n    this.truncateEntries(decoratedEntries);\n    // Clobber `labels` and `resource` fields with WriteOptions from the user.\n    const reqOpts = extend({\n      logName: this.formattedName_,\n      entries: decoratedEntries,\n      resource\n    }, options);\n    delete reqOpts.gaxOptions;\n    return this.logging.loggingService.writeLogEntries(reqOpts, options.gaxOptions, this.defaultWriteDeleteCallback);\n  }\n  /**\n   * getOrSetResource looks for GCP service context first at the user\n   * declaration level (snakecasing keys), then in the Logging instance,\n   * before finally detecting a resource from the environment.\n   * The resource is then memoized at the Logging instance level for future use.\n   *\n   * @param options\n   * @private\n   */\n  async getOrSetResource(options) {\n    if (options.resource) {\n      if (options.resource.labels) log_common_1.snakecaseKeys(options.resource.labels);\n      return options.resource;\n    }\n    await this.logging.setDetectedResource();\n    return this.logging.detectedResource;\n  }\n  /**\n   * All entries are passed through here in order be formatted and serialized.\n   * User provided Entry values are formatted per LogEntry specifications.\n   * Read more about the LogEntry format:\n   * https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\n   *\n   * @private\n   *\n   * @param {object[]} entries - Entry objects.\n   * @returns {object[]} Serialized entries.\n   * @throws if there is an error during serialization.\n   */\n  decorateEntries(entries) {\n    return entries.map(entry => {\n      if (!(entry instanceof entry_1.Entry)) {\n        entry = this.entry(entry);\n      }\n      return entry.toJSON({\n        removeCircular: this.removeCircular_\n      }, this.logging.projectId);\n    });\n  }\n  // TODO consider refactoring `truncateEntries` so that it does not mutate\n  /**\n   * Truncate log entries at maxEntrySize, so that error is not thrown, see:\n   * https://cloud.google.com/logging/quotas\n   *\n   * @private\n   *\n   * @param {object|string} the JSON log entry.\n   * @returns {object|string} truncated JSON log entry.\n   */\n  truncateEntries(entries) {\n    return entries.forEach(entry => {\n      if (this.maxEntrySize === undefined) return;\n      const payloadSize = JSON.stringify(entry).length;\n      if (payloadSize < this.maxEntrySize) return;\n      let delta = payloadSize - this.maxEntrySize;\n      if (entry.textPayload) {\n        entry.textPayload = entry.textPayload.slice(0, Math.max(entry.textPayload.length - delta, 0));\n      } else {\n        for (const field of this.jsonFieldsToTruncate) {\n          const msg = dotProp.get(entry, field, '');\n          if (msg !== null && msg !== undefined && msg !== '') {\n            dotProp.set(entry, field, msg.slice(0, Math.max(msg.length - delta, 0)));\n            delta -= Math.min(msg.length, delta);\n            if (delta <= 0) {\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n  // TODO: in a future breaking release, delete this extranenous function.\n  /**\n   * Return an array of log entries with the desired severity assigned.\n   *\n   * @private\n   *\n   * @param {object|object[]} entries - Log entries.\n   * @param {string} severity - The desired severity level.\n   */\n  static assignSeverityToEntries_(entries, severity) {\n    return log_common_1.assignSeverityToEntries(entries, severity);\n  }\n  // TODO: in a future breaking release, delete this extranenous function.\n  /**\n   * Format the name of a log. A log's full name is in the format of\n   * 'projects/{projectId}/logs/{logName}'.\n   *\n   * @private\n   *\n   * @returns {string}\n   */\n  static formatName_(projectId, name) {\n    return log_common_1.formatLogName(projectId, name);\n  }\n}\nexports.Log = Log;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will call a callback in the event\n * that a callback is provided .\n */\npromisify_1.callbackifyAll(Log, {\n  exclude: ['entry', 'getEntriesStream']\n});","map":{"version":3,"names":["promisify_1","require","dotProp","extend","entry_1","instrumentation_1","log_common_1","Log","constructor","logging","name","options","formattedName_","formatLogName","projectId","removeCircular_","removeCircular","maxEntrySize","split","pop","jsonFieldsToTruncate","undefined","filteredList","filter","str","includes","startsWith","uniqueSet","Set","Array","from","concat","defaultWriteDeleteCallback","alert","entry","write","assignSeverityToEntries","critical","debug","delete","gaxOptions","auth","getProjectId","reqOpts","logName","loggingService","deleteLog","emergency","metadataOrData","data","metadata","Object","prototype","hasOwnProperty","call","error","getEntries","opts","getEntriesStream","log","tailEntries","info","notice","warning","isInfoAdded","getInstrumentationInfoStatus","partialSuccess","setProjectId","resource","getOrSetResource","decoratedEntries","decorateEntries","populateInstrumentationInfo","truncateEntries","entries","writeLogEntries","labels","snakecaseKeys","setDetectedResource","detectedResource","map","Entry","toJSON","forEach","payloadSize","JSON","stringify","length","delta","textPayload","slice","Math","max","field","msg","get","set","min","assignSeverityToEntries_","severity","formatName_","exports","callbackifyAll","exclude"],"sources":["../../src/log.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}