{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertGramsToMetricTons = exports.convertGigaBytesToTerabyteHours = exports.convertMegabytesToGigabytes = exports.convertTerabytesToGigabytes = exports.convertGigabyteMonthsToTerabyteHours = exports.convertGigabyteHoursToTerabyteHours = exports.convertBytesToTerabytes = exports.convertByteSecondsToGigabyteHours = exports.convertBytesToGigabytes = exports.convertByteSecondsToTerabyteHours = void 0;\nconst moment_1 = __importDefault(require(\"moment\"));\nconst convertByteSecondsToTerabyteHours = usageAmount => {\n  return usageAmount / 1099511627776 / 3600;\n};\nexports.convertByteSecondsToTerabyteHours = convertByteSecondsToTerabyteHours;\nconst convertBytesToGigabytes = usageAmount => {\n  return usageAmount / 1073741824;\n};\nexports.convertBytesToGigabytes = convertBytesToGigabytes;\nconst convertByteSecondsToGigabyteHours = usageAmount => {\n  return usageAmount / 1073741824 / 3600;\n};\nexports.convertByteSecondsToGigabyteHours = convertByteSecondsToGigabyteHours;\nconst convertBytesToTerabytes = usageAmount => {\n  return usageAmount / 1099511627776;\n};\nexports.convertBytesToTerabytes = convertBytesToTerabytes;\nconst convertGigabyteHoursToTerabyteHours = usageAmount => {\n  return usageAmount / 1000;\n};\nexports.convertGigabyteHoursToTerabyteHours = convertGigabyteHoursToTerabyteHours;\nconst convertGigabyteMonthsToTerabyteHours = (usageAmount, timestamp) => {\n  const daysInMonth = (0, moment_1.default)(timestamp).isValid() ? (0, moment_1.default)(timestamp).utc().daysInMonth() : 30.42;\n  return usageAmount / 1000 * (24 * daysInMonth);\n};\nexports.convertGigabyteMonthsToTerabyteHours = convertGigabyteMonthsToTerabyteHours;\nconst convertTerabytesToGigabytes = usageAmount => {\n  return usageAmount * 1000;\n};\nexports.convertTerabytesToGigabytes = convertTerabytesToGigabytes;\nconst convertMegabytesToGigabytes = usageAmount => {\n  return usageAmount / 1024;\n};\nexports.convertMegabytesToGigabytes = convertMegabytesToGigabytes;\nconst convertGigaBytesToTerabyteHours = usageAmount => {\n  return usageAmount / 1000 * 24;\n};\nexports.convertGigaBytesToTerabyteHours = convertGigaBytesToTerabyteHours;\nconst convertGramsToMetricTons = amount => {\n  return amount / 1000000;\n};\nexports.convertGramsToMetricTons = convertGramsToMetricTons;","map":{"version":3,"names":["moment_1","__importDefault","require","convertByteSecondsToTerabyteHours","usageAmount","exports","convertBytesToGigabytes","convertByteSecondsToGigabyteHours","convertBytesToTerabytes","convertGigabyteHoursToTerabyteHours","convertGigabyteMonthsToTerabyteHours","timestamp","daysInMonth","default","isValid","utc","convertTerabytesToGigabytes","convertMegabytesToGigabytes","convertGigaBytesToTerabyteHours","convertGramsToMetricTons","amount"],"sources":["/Users/rhysgregory/node_modules/@cloud-carbon-footprint/common/src/helpers/unitConversion.ts"],"sourcesContent":["/*\n * Â© 2021 Thoughtworks, Inc.\n */\n\nimport moment from 'moment'\n\nexport const convertByteSecondsToTerabyteHours = (\n  usageAmount: number,\n): number => {\n  // This function converts byte-seconds into terabyte hours by first converting bytes to terabytes, then seconds to hours.\n  return usageAmount / 1099511627776 / 3600\n}\n\nexport const convertBytesToGigabytes = (usageAmount: number): number => {\n  return usageAmount / 1073741824\n}\n\nexport const convertByteSecondsToGigabyteHours = (\n  usageAmount: number,\n): number => {\n  return usageAmount / 1073741824 / 3600\n}\n\nexport const convertBytesToTerabytes = (usageAmount: number): number => {\n  return usageAmount / 1099511627776\n}\n\nexport const convertGigabyteHoursToTerabyteHours = (\n  usageAmount: number,\n): number => {\n  return usageAmount / 1000\n}\n\nexport const convertGigabyteMonthsToTerabyteHours = (\n  usageAmount: number,\n  timestamp: Date,\n): number => {\n  // Get the days in a month from a timestamp, or use the average days in a month\n  const daysInMonth = moment(timestamp).isValid()\n    ? moment(timestamp).utc().daysInMonth()\n    : 30.42\n  return (usageAmount / 1000) * (24 * daysInMonth)\n}\n\nexport const convertTerabytesToGigabytes = (usageAmount: number): number => {\n  return usageAmount * 1000\n}\n\nexport const convertMegabytesToGigabytes = (usageAmount: number): number => {\n  return usageAmount / 1024\n}\n\nexport const convertGigaBytesToTerabyteHours = (\n  usageAmount: number,\n): number => {\n  return (usageAmount / 1000) * 24\n}\n\nexport const convertGramsToMetricTons = (amount: number): number => {\n  return amount / 1000000\n}\n"],"mappings":";;;;;;;;;;;AAIA,MAAAA,QAAA,GAAAC,eAAA,CAAAC,OAAA;AAEO,MAAMC,iCAAiC,GAC5CC,WAAmB,IACT;EAEV,OAAOA,WAAW,GAAG,aAAa,GAAG,IAAI;AAC3C,CAAC;AALYC,OAAA,CAAAF,iCAAiC,GAAAA,iCAAA;AAOvC,MAAMG,uBAAuB,GAAIF,WAAmB,IAAY;EACrE,OAAOA,WAAW,GAAG,UAAU;AACjC,CAAC;AAFYC,OAAA,CAAAC,uBAAuB,GAAAA,uBAAA;AAI7B,MAAMC,iCAAiC,GAC5CH,WAAmB,IACT;EACV,OAAOA,WAAW,GAAG,UAAU,GAAG,IAAI;AACxC,CAAC;AAJYC,OAAA,CAAAE,iCAAiC,GAAAA,iCAAA;AAMvC,MAAMC,uBAAuB,GAAIJ,WAAmB,IAAY;EACrE,OAAOA,WAAW,GAAG,aAAa;AACpC,CAAC;AAFYC,OAAA,CAAAG,uBAAuB,GAAAA,uBAAA;AAI7B,MAAMC,mCAAmC,GAC9CL,WAAmB,IACT;EACV,OAAOA,WAAW,GAAG,IAAI;AAC3B,CAAC;AAJYC,OAAA,CAAAI,mCAAmC,GAAAA,mCAAA;AAMzC,MAAMC,oCAAoC,GAAGA,CAClDN,WAAmB,EACnBO,SAAe,KACL;EAEV,MAAMC,WAAW,GAAG,IAAAZ,QAAA,CAAAa,OAAM,EAACF,SAAS,CAAC,CAACG,OAAO,EAAE,GAC3C,IAAAd,QAAA,CAAAa,OAAM,EAACF,SAAS,CAAC,CAACI,GAAG,EAAE,CAACH,WAAW,EAAE,GACrC,KAAK;EACT,OAAQR,WAAW,GAAG,IAAI,IAAK,EAAE,GAAGQ,WAAW,CAAC;AAClD,CAAC;AATYP,OAAA,CAAAK,oCAAoC,GAAAA,oCAAA;AAW1C,MAAMM,2BAA2B,GAAIZ,WAAmB,IAAY;EACzE,OAAOA,WAAW,GAAG,IAAI;AAC3B,CAAC;AAFYC,OAAA,CAAAW,2BAA2B,GAAAA,2BAAA;AAIjC,MAAMC,2BAA2B,GAAIb,WAAmB,IAAY;EACzE,OAAOA,WAAW,GAAG,IAAI;AAC3B,CAAC;AAFYC,OAAA,CAAAY,2BAA2B,GAAAA,2BAAA;AAIjC,MAAMC,+BAA+B,GAC1Cd,WAAmB,IACT;EACV,OAAQA,WAAW,GAAG,IAAI,GAAI,EAAE;AAClC,CAAC;AAJYC,OAAA,CAAAa,+BAA+B,GAAAA,+BAAA;AAMrC,MAAMC,wBAAwB,GAAIC,MAAc,IAAY;EACjE,OAAOA,MAAM,GAAG,OAAO;AACzB,CAAC;AAFYf,OAAA,CAAAc,wBAAwB,GAAAA,wBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}