{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sink = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst extend = require(\"extend\");\n/**\n * A sink is an object that lets you to specify a set of log entries to export\n * to a particular destination. Cloud Logging lets you export log entries\n * to destinations including Cloud Storage buckets (for long term log\n * storage), Google BigQuery datasets (for log analysis), Google Pub/Sub (for\n * streaming to other applications).\n *\n * See {@link https://cloud.google.com/logging/docs/basic-concepts#sinks|Introduction to Sinks}\n *\n * @class\n *\n * @param {Logging} logging {@link Logging} instance.\n * @param {string} name Name of the sink.\n *\n * @example\n * ```\n * const {Logging} = require('@google-cloud/logging');\n * const logging = new Logging();\n * const sink = logging.sink('my-sink');\n * ```\n */\nclass Sink {\n  constructor(logging, name) {\n    this.logging = logging;\n    /**\n     * @name Sink#name\n     * @type {string}\n     */\n    this.name = name;\n    this.formattedName_ = 'projects/' + logging.projectId + '/sinks/' + name;\n  }\n  create(config) {\n    return this.logging.createSink(this.name, config);\n  }\n  async delete(gaxOptions) {\n    const projectId = await this.logging.auth.getProjectId();\n    this.formattedName_ = 'projects/' + projectId + '/sinks/' + this.name;\n    const reqOpts = {\n      sinkName: this.formattedName_\n    };\n    return this.logging.configService.deleteSink(reqOpts, gaxOptions);\n  }\n  async getMetadata(gaxOptions) {\n    const projectId = await this.logging.auth.getProjectId();\n    this.formattedName_ = 'projects/' + projectId + '/sinks/' + this.name;\n    const reqOpts = {\n      sinkName: this.formattedName_\n    };\n    [this.metadata] = await this.logging.configService.getSink(reqOpts, gaxOptions);\n    return [this.metadata];\n  }\n  setFilter(filter) {\n    return this.setMetadata({\n      filter\n    });\n  }\n  async setMetadata(metadata) {\n    const [currentMetadata] = await this.getMetadata();\n    const uniqueWriterIdentity = metadata.uniqueWriterIdentity;\n    delete metadata.uniqueWriterIdentity;\n    let reqOpts = {\n      sinkName: this.formattedName_,\n      sink: extend({}, currentMetadata, metadata)\n    };\n    delete reqOpts.sink.gaxOptions;\n    // Add user specified uniqueWriterIdentity boolean, if any.\n    reqOpts = {\n      ...reqOpts,\n      ...(uniqueWriterIdentity && {\n        uniqueWriterIdentity\n      })\n    };\n    [this.metadata] = await this.logging.configService.updateSink(reqOpts, metadata.gaxOptions);\n    return [this.metadata];\n  }\n}\nexports.Sink = Sink;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will call a callbakc in the event\n * that a callback is provided.\n */\npromisify_1.callbackifyAll(Sink);","map":{"version":3,"names":["promisify_1","require","extend","Sink","constructor","logging","name","formattedName_","projectId","create","config","createSink","delete","gaxOptions","auth","getProjectId","reqOpts","sinkName","configService","deleteSink","getMetadata","metadata","getSink","setFilter","filter","setMetadata","currentMetadata","uniqueWriterIdentity","sink","updateSink","exports","callbackifyAll"],"sources":["../../src/sink.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAwBA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAME,IAAI;EAKRC,YAAYC,OAAgB,EAAEC,IAAY;IACxC,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB;;;;IAIA,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,cAAc,GAAG,WAAW,GAAGF,OAAO,CAACG,SAAS,GAAG,SAAS,GAAGF,IAAI;EAC1E;EA4CAG,MAAMA,CAACC,MAAyB;IAC9B,OAAO,IAAI,CAACL,OAAO,CAACM,UAAU,CAAC,IAAI,CAACL,IAAI,EAAEI,MAAM,CAAC;EACnD;EAgDA,MAAME,MAAMA,CACVC,UAAyC;IAEzC,MAAML,SAAS,GAAG,MAAM,IAAI,CAACH,OAAO,CAACS,IAAI,CAACC,YAAY,EAAE;IACxD,IAAI,CAACR,cAAc,GAAG,WAAW,GAAGC,SAAS,GAAG,SAAS,GAAG,IAAI,CAACF,IAAI;IACrE,MAAMU,OAAO,GAAG;MACdC,QAAQ,EAAE,IAAI,CAACV;KAChB;IACD,OAAO,IAAI,CAACF,OAAO,CAACa,aAAa,CAACC,UAAU,CAC1CH,OAAO,EACPH,UAAyB,CAC1B;EACH;EA+CA,MAAMO,WAAWA,CACfP,UAA+C;IAE/C,MAAML,SAAS,GAAG,MAAM,IAAI,CAACH,OAAO,CAACS,IAAI,CAACC,YAAY,EAAE;IACxD,IAAI,CAACR,cAAc,GAAG,WAAW,GAAGC,SAAS,GAAG,SAAS,GAAG,IAAI,CAACF,IAAI;IACrE,MAAMU,OAAO,GAAG;MACdC,QAAQ,EAAE,IAAI,CAACV;KAChB;IAED,CAAC,IAAI,CAACc,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAChB,OAAO,CAACa,aAAa,CAACI,OAAO,CACxDN,OAAO,EACPH,UAAyB,CAC1B;IACD,OAAO,CAAC,IAAI,CAACQ,QAAS,CAAC;EACzB;EA0CAE,SAASA,CAACC,MAAc;IACtB,OAAO,IAAI,CAACC,WAAW,CAAC;MACtBD;KACD,CAAC;EACJ;EAyDA,MAAMC,WAAWA,CAACJ,QAAyB;IACzC,MAAM,CAACK,eAAe,CAAC,GAAG,MAAM,IAAI,CAACN,WAAW,EAAE;IAClD,MAAMO,oBAAoB,GAAGN,QAAQ,CAACM,oBAAoB;IAC1D,OAAON,QAAQ,CAACM,oBAAoB;IACpC,IAAIX,OAAO,GAAG;MACZC,QAAQ,EAAE,IAAI,CAACV,cAAc;MAC7BqB,IAAI,EAAE1B,MAAM,CAAC,EAAE,EAAEwB,eAAe,EAAEL,QAAQ;KAC3C;IACD,OAAOL,OAAO,CAACY,IAAI,CAACf,UAAU;IAC9B;IACAG,OAAO,GAAG;MACR,GAAGA,OAAO;MACV,IAAIW,oBAAoB,IAAI;QAACA;MAAoB,CAAC;KACnD;IACD,CAAC,IAAI,CAACN,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAChB,OAAO,CAACa,aAAa,CAACW,UAAU,CAC3Db,OAAO,EACPK,QAAQ,CAACR,UAAU,CACpB;IACD,OAAO,CAAC,IAAI,CAACQ,QAAS,CAAC;EACzB;;AAeMS,OAAA,CAAA3B,IAAA,GAAAA,IAAA;AAZR;;;;;AAKAH,WAAA,CAAA+B,cAAc,CAAC5B,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}