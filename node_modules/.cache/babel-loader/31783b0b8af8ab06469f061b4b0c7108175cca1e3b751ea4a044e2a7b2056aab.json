{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultMetadataForTracing = void 0;\nconst common_1 = require(\"./common\");\n/**\n * Returns an object that can be passed to Winston.createLogger as defaultMeta\n * to allow log-trace correlation with Winston 3. Log-trace correlation with\n * Winston 3 is broken because the trace ID to be correlated with a log isn't\n * evaluated when the log function is called, but rather when the log is\n * written, which happens at some future point where the trace ID may no longer\n * be accurate. To circumvent this, we take advantage of the fact that\n * defaultMeta is copied when a log function is called, and use a dynamic\n * property getter to evaluate the trace ID upon that copy.\n *\n * We apply the same principle for timestamps, which is not strictly necessary\n * for tracing but allows for more accurate timestamps in general.\n *\n * If there are other default metadata fields with which the return value of\n * this function must be merged, this object MUST be the base object. In other\n * words, do not use the return value of this function as the non-first argument\n * to Object.assign, or it will not work.\n *\n * See https://github.com/googleapis/nodejs-logging-winston/issues/287 for\n * more information.\n */\nfunction getDefaultMetadataForTracing() {\n  const agent = global._google_trace_agent;\n  // Enable log-trace correlation if the Trace Agent API is compatible.\n  const enableThunkAgent = !!(agent && agent.getCurrentContextId && agent.getWriterProjectId);\n  const defaultMeta = {};\n  // Make defaultMeta.timestamp return the current timestamp any time it's\n  // accessed.\n  Object.defineProperty(defaultMeta, 'timestamp', {\n    enumerable: true,\n    get: () => new Date()\n  });\n  if (enableThunkAgent) {\n    // Make defaultMeta[LOGGING_TRACE_KEY] return the current trace ID any time\n    // it's accessed.\n    const loggingTraceKey = common_1.LOGGING_TRACE_KEY;\n    Object.defineProperty(defaultMeta, loggingTraceKey, {\n      enumerable: true,\n      get: () => {\n        const traceId = agent.getCurrentContextId();\n        if (!traceId) {\n          return null;\n        }\n        const traceProjectId = agent.getWriterProjectId();\n        if (!traceProjectId) {\n          return null;\n        }\n        return `projects/${traceProjectId}/traces/${traceId}`;\n      }\n    });\n  }\n  return defaultMeta;\n}\nexports.getDefaultMetadataForTracing = getDefaultMetadataForTracing;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDefaultMetadataForTracing","common_1","require","agent","global","_google_trace_agent","enableThunkAgent","getCurrentContextId","getWriterProjectId","defaultMeta","enumerable","get","Date","loggingTraceKey","LOGGING_TRACE_KEY","traceId","traceProjectId"],"sources":["/Users/rhysgregory/node_modules/@google-cloud/logging-winston/build/src/default-metadata.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDefaultMetadataForTracing = void 0;\nconst common_1 = require(\"./common\");\n/**\n * Returns an object that can be passed to Winston.createLogger as defaultMeta\n * to allow log-trace correlation with Winston 3. Log-trace correlation with\n * Winston 3 is broken because the trace ID to be correlated with a log isn't\n * evaluated when the log function is called, but rather when the log is\n * written, which happens at some future point where the trace ID may no longer\n * be accurate. To circumvent this, we take advantage of the fact that\n * defaultMeta is copied when a log function is called, and use a dynamic\n * property getter to evaluate the trace ID upon that copy.\n *\n * We apply the same principle for timestamps, which is not strictly necessary\n * for tracing but allows for more accurate timestamps in general.\n *\n * If there are other default metadata fields with which the return value of\n * this function must be merged, this object MUST be the base object. In other\n * words, do not use the return value of this function as the non-first argument\n * to Object.assign, or it will not work.\n *\n * See https://github.com/googleapis/nodejs-logging-winston/issues/287 for\n * more information.\n */\nfunction getDefaultMetadataForTracing() {\n    const agent = global._google_trace_agent;\n    // Enable log-trace correlation if the Trace Agent API is compatible.\n    const enableThunkAgent = !!(agent &&\n        agent.getCurrentContextId &&\n        agent.getWriterProjectId);\n    const defaultMeta = {};\n    // Make defaultMeta.timestamp return the current timestamp any time it's\n    // accessed.\n    Object.defineProperty(defaultMeta, 'timestamp', {\n        enumerable: true,\n        get: () => new Date(),\n    });\n    if (enableThunkAgent) {\n        // Make defaultMeta[LOGGING_TRACE_KEY] return the current trace ID any time\n        // it's accessed.\n        const loggingTraceKey = common_1.LOGGING_TRACE_KEY;\n        Object.defineProperty(defaultMeta, loggingTraceKey, {\n            enumerable: true,\n            get: () => {\n                const traceId = agent.getCurrentContextId();\n                if (!traceId) {\n                    return null;\n                }\n                const traceProjectId = agent.getWriterProjectId();\n                if (!traceProjectId) {\n                    return null;\n                }\n                return `projects/${traceProjectId}/traces/${traceId}`;\n            },\n        });\n    }\n    return defaultMeta;\n}\nexports.getDefaultMetadataForTracing = getDefaultMetadataForTracing;\n//# sourceMappingURL=default-metadata.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,4BAA4B,GAAG,KAAK,CAAC;AAC7C,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,4BAA4BA,CAAA,EAAG;EACpC,MAAMG,KAAK,GAAGC,MAAM,CAACC,mBAAmB;EACxC;EACA,MAAMC,gBAAgB,GAAG,CAAC,EAAEH,KAAK,IAC7BA,KAAK,CAACI,mBAAmB,IACzBJ,KAAK,CAACK,kBAAkB,CAAC;EAC7B,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtB;EACA;EACAb,MAAM,CAACC,cAAc,CAACY,WAAW,EAAE,WAAW,EAAE;IAC5CC,UAAU,EAAE,IAAI;IAChBC,GAAG,EAAEA,CAAA,KAAM,IAAIC,IAAI,CAAC;EACxB,CAAC,CAAC;EACF,IAAIN,gBAAgB,EAAE;IAClB;IACA;IACA,MAAMO,eAAe,GAAGZ,QAAQ,CAACa,iBAAiB;IAClDlB,MAAM,CAACC,cAAc,CAACY,WAAW,EAAEI,eAAe,EAAE;MAChDH,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAEA,CAAA,KAAM;QACP,MAAMI,OAAO,GAAGZ,KAAK,CAACI,mBAAmB,CAAC,CAAC;QAC3C,IAAI,CAACQ,OAAO,EAAE;UACV,OAAO,IAAI;QACf;QACA,MAAMC,cAAc,GAAGb,KAAK,CAACK,kBAAkB,CAAC,CAAC;QACjD,IAAI,CAACQ,cAAc,EAAE;UACjB,OAAO,IAAI;QACf;QACA,OAAQ,YAAWA,cAAe,WAAUD,OAAQ,EAAC;MACzD;IACJ,CAAC,CAAC;EACN;EACA,OAAON,WAAW;AACtB;AACAX,OAAO,CAACE,4BAA4B,GAAGA,4BAA4B"},"metadata":{},"sourceType":"script","externalDependencies":[]}