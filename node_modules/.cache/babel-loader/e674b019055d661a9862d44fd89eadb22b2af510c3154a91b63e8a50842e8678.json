{"ast":null,"code":"\"use strict\";\n\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LOGGING_SAMPLED_KEY = exports.LOGGING_SPAN_KEY = exports.LOGGING_TRACE_KEY = exports.LoggingWinston = exports.getCurrentTraceFromAgent = exports.getDefaultMetadataForTracing = exports.express = void 0;\nconst TransportStream = require(\"winston-transport\");\nconst common_1 = require(\"./common\");\nObject.defineProperty(exports, \"getCurrentTraceFromAgent\", {\n  enumerable: true,\n  get: function () {\n    return common_1.getCurrentTraceFromAgent;\n  }\n});\nconst express = require(\"./middleware/express\");\nexports.express = express;\nconst default_metadata_1 = require(\"./default-metadata\");\nObject.defineProperty(exports, \"getDefaultMetadataForTracing\", {\n  enumerable: true,\n  get: function () {\n    return default_metadata_1.getDefaultMetadataForTracing;\n  }\n});\nconst LEVEL = Symbol.for('level');\n/**\n * This module provides support for streaming your winston logs to\n * [Stackdriver Logging](https://cloud.google.com/logging).\n *\n * @class\n *\n * @param {object} [options]\n * @param {object} [options.level] The default log level. Winston will filter\n *     messages with a severity lower than this.\n * @param {object} [options.levels] Custom logging levels as supported by\n *     winston. This list is used to translate your log level to the Stackdriver\n *     Logging level. Each property should have an integer value between 0 (most\n *     severe) and 7 (least severe). If you are passing a list of levels to your\n *     winston logger, you should provide the same list here.\n * @param {boolean} [options.inspectMetadata=false] Serialize winston-provided log\n *     metadata using `util.inspect`.\n * @param {string} [options.logName=winston_log] The name of the log that will receive\n *     messages written to this transport.\n * @param {object} [options.resource] The monitored resource that the transport\n *     corresponds to. On Google Cloud Platform, this is detected automatically,\n *     but you may optionally specify a specific monitored resource. For more\n *     information see the\n *     [official documentation]{@link\n * https://cloud.google.com/logging/docs/api/reference/rest/v2/MonitoredResource}.\n * @param {object} [options.serviceContext] For logged errors, we provide this\n *     as the service context. For more information see\n *     [this guide]{@link\n * https://cloud.google.com/error-reporting/docs/formatting-error-messages} and\n * the [official documentation]{@link\n * https://cloud.google.com/error-reporting/reference/rest/v1beta1/ServiceContext}.\n * @param {string} [options.serviceContext.service] An identifier of the\n *     service, such as the name of the executable, job, or Google App Engine\n *     service name.\n * @param {string} [options.serviceContext.version] Represents the version of\n *     the service.\n * @param {string} [options.projectId] The project ID from the Google Cloud\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @param {string} [options.keyFilename] Full path to the a .json, .pem, or .p12\n *     key downloaded from the Google Cloud Console. If you provide a path\n *     to a JSON file, the `projectId` option above is not necessary. NOTE: .pem\n *     and .p12 require you to specify the `email` option as well.\n * @param {string} [options.email] Account email address. Required when using a\n *     .pem or .p12 keyFilename.\n * @param {object} [options.credentials] Credentials object.\n * @param {string} [options.credentials.client_email]\n * @param {string} [options.credentials.private_key]\n * @param {boolean} [options.autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @param {number} [options.maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @param {constructor} [options.promise] Custom promise module to use instead\n *     of native Promises.\n *\n * @example <caption>Import the client library</caption>\n * const {LoggingWinston} = require('@google-cloud/logging-winston');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> const loggingWinston = new\n * LoggingWinston();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> const loggingWinston = new LoggingWinston({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:logging_winston_quickstart\n * Full quickstart example:\n */\nclass LoggingWinston extends TransportStream {\n  constructor(options) {\n    options = options || {};\n    super({\n      level: options.level\n    });\n    this.common = new common_1.LoggingCommon(options);\n  }\n  // eslint-disable-next-line\n  log(info, callback) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      message,\n      level,\n      splat,\n      stack,\n      ...metadata\n    } = info;\n    // If the whole message is an error we have to manually copy the stack into\n    // metadata. Errors dont have enumerable properties so they don't\n    // destructure.\n    if (stack) metadata.stack = stack;\n    this.common.log(info[LEVEL] || level, message, metadata || {}, callback);\n  }\n}\nexports.LoggingWinston = LoggingWinston;\nLoggingWinston.LOGGING_TRACE_KEY = common_1.LOGGING_TRACE_KEY;\nLoggingWinston.LOGGING_SPAN_KEY = common_1.LOGGING_SPAN_KEY;\nLoggingWinston.LOGGING_SAMPLED_KEY = common_1.LOGGING_SAMPLED_KEY;\n// LOGGING_TRACE_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/trace\n// For more information, see: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#FIELDS.trace\nexports.LOGGING_TRACE_KEY = common_1.LOGGING_TRACE_KEY;\n// LOGGING_SPAN_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/spanId\n// For more information, see: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#FIELDS.span_id\nexports.LOGGING_SPAN_KEY = common_1.LOGGING_SPAN_KEY;\n// LOGGING_SAMPLED_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/trace_sampled\n// The value of this field must be either true or false. For more information,\n// see traceSampled on the LogEntry page:\thttps://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#FIELDS.trace_sampled\nexports.LOGGING_SAMPLED_KEY = common_1.LOGGING_SAMPLED_KEY;","map":{"version":3,"names":["Object","defineProperty","exports","value","LOGGING_SAMPLED_KEY","LOGGING_SPAN_KEY","LOGGING_TRACE_KEY","LoggingWinston","getCurrentTraceFromAgent","getDefaultMetadataForTracing","express","TransportStream","require","common_1","enumerable","get","default_metadata_1","LEVEL","Symbol","for","constructor","options","level","common","LoggingCommon","log","info","callback","message","splat","stack","metadata"],"sources":["/Users/rhysgregory/node_modules/@google-cloud/logging-winston/build/src/index.js"],"sourcesContent":["\"use strict\";\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LOGGING_SAMPLED_KEY = exports.LOGGING_SPAN_KEY = exports.LOGGING_TRACE_KEY = exports.LoggingWinston = exports.getCurrentTraceFromAgent = exports.getDefaultMetadataForTracing = exports.express = void 0;\nconst TransportStream = require(\"winston-transport\");\nconst common_1 = require(\"./common\");\nObject.defineProperty(exports, \"getCurrentTraceFromAgent\", { enumerable: true, get: function () { return common_1.getCurrentTraceFromAgent; } });\nconst express = require(\"./middleware/express\");\nexports.express = express;\nconst default_metadata_1 = require(\"./default-metadata\");\nObject.defineProperty(exports, \"getDefaultMetadataForTracing\", { enumerable: true, get: function () { return default_metadata_1.getDefaultMetadataForTracing; } });\nconst LEVEL = Symbol.for('level');\n/**\n * This module provides support for streaming your winston logs to\n * [Stackdriver Logging](https://cloud.google.com/logging).\n *\n * @class\n *\n * @param {object} [options]\n * @param {object} [options.level] The default log level. Winston will filter\n *     messages with a severity lower than this.\n * @param {object} [options.levels] Custom logging levels as supported by\n *     winston. This list is used to translate your log level to the Stackdriver\n *     Logging level. Each property should have an integer value between 0 (most\n *     severe) and 7 (least severe). If you are passing a list of levels to your\n *     winston logger, you should provide the same list here.\n * @param {boolean} [options.inspectMetadata=false] Serialize winston-provided log\n *     metadata using `util.inspect`.\n * @param {string} [options.logName=winston_log] The name of the log that will receive\n *     messages written to this transport.\n * @param {object} [options.resource] The monitored resource that the transport\n *     corresponds to. On Google Cloud Platform, this is detected automatically,\n *     but you may optionally specify a specific monitored resource. For more\n *     information see the\n *     [official documentation]{@link\n * https://cloud.google.com/logging/docs/api/reference/rest/v2/MonitoredResource}.\n * @param {object} [options.serviceContext] For logged errors, we provide this\n *     as the service context. For more information see\n *     [this guide]{@link\n * https://cloud.google.com/error-reporting/docs/formatting-error-messages} and\n * the [official documentation]{@link\n * https://cloud.google.com/error-reporting/reference/rest/v1beta1/ServiceContext}.\n * @param {string} [options.serviceContext.service] An identifier of the\n *     service, such as the name of the executable, job, or Google App Engine\n *     service name.\n * @param {string} [options.serviceContext.version] Represents the version of\n *     the service.\n * @param {string} [options.projectId] The project ID from the Google Cloud\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @param {string} [options.keyFilename] Full path to the a .json, .pem, or .p12\n *     key downloaded from the Google Cloud Console. If you provide a path\n *     to a JSON file, the `projectId` option above is not necessary. NOTE: .pem\n *     and .p12 require you to specify the `email` option as well.\n * @param {string} [options.email] Account email address. Required when using a\n *     .pem or .p12 keyFilename.\n * @param {object} [options.credentials] Credentials object.\n * @param {string} [options.credentials.client_email]\n * @param {string} [options.credentials.private_key]\n * @param {boolean} [options.autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @param {number} [options.maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @param {constructor} [options.promise] Custom promise module to use instead\n *     of native Promises.\n *\n * @example <caption>Import the client library</caption>\n * const {LoggingWinston} = require('@google-cloud/logging-winston');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> const loggingWinston = new\n * LoggingWinston();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> const loggingWinston = new LoggingWinston({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:logging_winston_quickstart\n * Full quickstart example:\n */\nclass LoggingWinston extends TransportStream {\n    constructor(options) {\n        options = options || {};\n        super({\n            level: options.level,\n        });\n        this.common = new common_1.LoggingCommon(options);\n    }\n    // eslint-disable-next-line\n    log(info, callback) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { message, level, splat, stack, ...metadata } = info;\n        // If the whole message is an error we have to manually copy the stack into\n        // metadata. Errors dont have enumerable properties so they don't\n        // destructure.\n        if (stack)\n            metadata.stack = stack;\n        this.common.log(info[LEVEL] || level, message, metadata || {}, callback);\n    }\n}\nexports.LoggingWinston = LoggingWinston;\nLoggingWinston.LOGGING_TRACE_KEY = common_1.LOGGING_TRACE_KEY;\nLoggingWinston.LOGGING_SPAN_KEY = common_1.LOGGING_SPAN_KEY;\nLoggingWinston.LOGGING_SAMPLED_KEY = common_1.LOGGING_SAMPLED_KEY;\n// LOGGING_TRACE_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/trace\n// For more information, see: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#FIELDS.trace\nexports.LOGGING_TRACE_KEY = common_1.LOGGING_TRACE_KEY;\n// LOGGING_SPAN_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/spanId\n// For more information, see: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#FIELDS.span_id\nexports.LOGGING_SPAN_KEY = common_1.LOGGING_SPAN_KEY;\n// LOGGING_SAMPLED_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/trace_sampled\n// The value of this field must be either true or false. For more information,\n// see traceSampled on the LogEntry page:\thttps://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#FIELDS.trace_sampled\nexports.LOGGING_SAMPLED_KEY = common_1.LOGGING_SAMPLED_KEY;\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}