{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reduceByTimestamp = void 0;\nconst ramda_1 = require(\"ramda\");\nconst helpers_1 = require(\"./helpers\");\nconst reduceByTimestamp = estimationResults => {\n  const accumulatingFn = (acc, value) => {\n    acc.timestamp = acc.timestamp || new Date(value.timestamp);\n    acc.serviceEstimates = acc.serviceEstimates.concat(value.serviceEstimates);\n    acc.groupBy = acc.groupBy || value.groupBy;\n    acc.periodStartDate = acc.timestamp || new Date(value.timestamp);\n    acc.periodEndDate = (0, helpers_1.getPeriodEndDate)(acc.periodStartDate, acc.groupBy);\n    return acc;\n  };\n  const getTimeOfEstimate = estimationResult => estimationResult.timestamp.toISOString();\n  const result = (0, ramda_1.reduceBy)(accumulatingFn, {\n    timestamp: undefined,\n    serviceEstimates: [],\n    periodStartDate: undefined,\n    periodEndDate: undefined,\n    groupBy: undefined\n  }, getTimeOfEstimate, estimationResults);\n  return Object.values(result);\n};\nexports.reduceByTimestamp = reduceByTimestamp;","map":{"version":3,"names":["ramda_1","require","helpers_1","reduceByTimestamp","estimationResults","accumulatingFn","acc","value","timestamp","Date","serviceEstimates","concat","groupBy","periodStartDate","periodEndDate","getPeriodEndDate","getTimeOfEstimate","estimationResult","toISOString","result","reduceBy","undefined","Object","values","exports"],"sources":["/Users/rhysgregory/node_modules/@cloud-carbon-footprint/common/src/EstimationResult.ts"],"sourcesContent":["/*\n * Â© 2021 Thoughtworks, Inc.\n */\n\nimport { reduceBy } from 'ramda'\nimport { GroupBy } from './Config'\nimport { getPeriodEndDate } from './helpers'\n\nexport interface EstimationResult {\n  readonly timestamp: Date\n  readonly serviceEstimates: ServiceData[]\n  periodStartDate?: Date\n  periodEndDate?: Date\n  groupBy: GroupBy\n}\n\nexport interface ServiceData {\n  readonly cloudProvider: string\n  readonly kilowattHours: number\n  readonly co2e: number\n  readonly cost: number\n  readonly usesAverageCPUConstant?: boolean\n  readonly accountId: string\n  // these attributes are mutable because it is required by the client package\n  accountName: string\n  serviceName: string\n  region: string\n  tags?: TagCollection\n}\n\nexport interface TagCollection {\n  [index: string]: string\n}\n\nexport const reduceByTimestamp = (\n  estimationResults: EstimationResult[],\n): EstimationResult[] => {\n  // We need this mutable type in order to set the first timestamp based on the estimationResults values.\n  interface MutableEstimationResult {\n    timestamp: Date | undefined\n    serviceEstimates: ServiceData[]\n    periodStartDate: Date\n    periodEndDate: Date\n    groupBy: GroupBy\n  }\n\n  const accumulatingFn = (\n    acc: MutableEstimationResult,\n    value: MutableEstimationResult,\n  ) => {\n    acc.timestamp = acc.timestamp || new Date(value.timestamp)\n    acc.serviceEstimates = acc.serviceEstimates.concat(value.serviceEstimates)\n    acc.groupBy = acc.groupBy || value.groupBy\n    acc.periodStartDate = acc.timestamp || new Date(value.timestamp)\n    acc.periodEndDate = getPeriodEndDate(acc.periodStartDate, acc.groupBy)\n    return acc\n  }\n  const getTimeOfEstimate = (estimationResult: { timestamp: Date }) =>\n    estimationResult.timestamp.toISOString()\n\n  const result = reduceBy(\n    accumulatingFn,\n    {\n      timestamp: undefined,\n      serviceEstimates: [],\n      periodStartDate: undefined,\n      periodEndDate: undefined,\n      groupBy: undefined,\n    },\n    getTimeOfEstimate,\n    estimationResults,\n  )\n\n  return Object.values(result)\n}\n"],"mappings":";;;;;;AAIA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,SAAA,GAAAD,OAAA;AA4BO,MAAME,iBAAiB,GAC5BC,iBAAqC,IACf;EAUtB,MAAMC,cAAc,GAAGA,CACrBC,GAA4B,EAC5BC,KAA8B,KAC5B;IACFD,GAAG,CAACE,SAAS,GAAGF,GAAG,CAACE,SAAS,IAAI,IAAIC,IAAI,CAACF,KAAK,CAACC,SAAS,CAAC;IAC1DF,GAAG,CAACI,gBAAgB,GAAGJ,GAAG,CAACI,gBAAgB,CAACC,MAAM,CAACJ,KAAK,CAACG,gBAAgB,CAAC;IAC1EJ,GAAG,CAACM,OAAO,GAAGN,GAAG,CAACM,OAAO,IAAIL,KAAK,CAACK,OAAO;IAC1CN,GAAG,CAACO,eAAe,GAAGP,GAAG,CAACE,SAAS,IAAI,IAAIC,IAAI,CAACF,KAAK,CAACC,SAAS,CAAC;IAChEF,GAAG,CAACQ,aAAa,GAAG,IAAAZ,SAAA,CAAAa,gBAAgB,EAACT,GAAG,CAACO,eAAe,EAAEP,GAAG,CAACM,OAAO,CAAC;IACtE,OAAON,GAAG;EACZ,CAAC;EACD,MAAMU,iBAAiB,GAAIC,gBAAqC,IAC9DA,gBAAgB,CAACT,SAAS,CAACU,WAAW,EAAE;EAE1C,MAAMC,MAAM,GAAG,IAAAnB,OAAA,CAAAoB,QAAQ,EACrBf,cAAc,EACd;IACEG,SAAS,EAAEa,SAAS;IACpBX,gBAAgB,EAAE,EAAE;IACpBG,eAAe,EAAEQ,SAAS;IAC1BP,aAAa,EAAEO,SAAS;IACxBT,OAAO,EAAES;GACV,EACDL,iBAAiB,EACjBZ,iBAAiB,CAClB;EAED,OAAOkB,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC;AAC9B,CAAC;AAxCYK,OAAA,CAAArB,iBAAiB,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}