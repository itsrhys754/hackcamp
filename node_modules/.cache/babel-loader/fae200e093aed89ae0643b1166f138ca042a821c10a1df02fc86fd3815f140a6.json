{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zuluToDateObj = exports.decodeValue = exports.structToObj = exports.ObjectToStructConverter = exports.objToStruct = void 0;\nfunction objToStruct(obj, options) {\n  return new ObjectToStructConverter(options).convert(obj);\n}\nexports.objToStruct = objToStruct;\nclass ObjectToStructConverter {\n  /**\n   * A class that can be used to convert an object to a struct. Optionally this\n   * class can be used to erase/throw on circular references during conversion.\n   *\n   * @private\n   *\n   * @param {object=} options - Configuration object.\n   * @param {boolean} options.removeCircular - Remove circular references in the\n   *     object with a placeholder string. (Default: `false`)\n   * @param {boolean} options.stringify - Stringify un-recognized types. (Default:\n   *     `false`)\n   */\n  constructor(options) {\n    options = options || {};\n    this.seenObjects = new Set();\n    this.removeCircular = options.removeCircular === true;\n    this.stringify = options.stringify === true;\n  }\n  /**\n   * Begin the conversion process from a JS object to an encoded gRPC Value\n   * message.\n   *\n   * @param {*} value - The input value.\n   * @return {object} - The encoded value.\n   *\n   * @example\n   * ```\n   * ObjectToStructConverter.convert({\n   *   aString: 'Hi'\n   * });\n   * // {\n   * //   fields: {\n   * //     aString: {\n   * //       stringValue: 'Hello!'\n   * //     }\n   * //   }\n   * // }\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  convert(obj) {\n    const convertedObject = {\n      fields: {}\n    };\n    this.seenObjects.add(obj);\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        const value = obj[prop];\n        if (value === undefined) {\n          continue;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        convertedObject.fields[prop] = this.encodeValue_(value);\n      }\n    }\n    this.seenObjects.delete(obj);\n    return convertedObject;\n  }\n  /**\n   * Convert a raw value to a type-denoted protobuf message-friendly object.\n   *\n   * @private\n   *\n   * @param {*} value - The input value.\n   * @return {*} - The encoded value.\n   *\n   * @example\n   * ```\n   * ObjectToStructConverter.encodeValue('Hi');\n   * // {\n   * //   stringValue: 'Hello!'\n   * // }\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  encodeValue_(value) {\n    let convertedValue;\n    if (value === null) {\n      convertedValue = {\n        nullValue: 0\n      };\n    } else if (typeof value === 'number') {\n      convertedValue = {\n        numberValue: value\n      };\n    } else if (typeof value === 'string') {\n      convertedValue = {\n        stringValue: value\n      };\n    } else if (typeof value === 'boolean') {\n      convertedValue = {\n        boolValue: value\n      };\n    } else if (Buffer.isBuffer(value)) {\n      convertedValue = {\n        blobValue: value\n      };\n    } else if (Array.isArray(value)) {\n      convertedValue = {\n        listValue: {\n          values: value.map(this.encodeValue_.bind(this))\n        }\n      };\n    } else if (Object.prototype.toString.call(value) === '[object Object]') {\n      if (this.seenObjects.has(value)) {\n        // Circular reference.\n        if (!this.removeCircular) {\n          throw new Error(['This object contains a circular reference. To automatically', 'remove it, set the `removeCircular` option to true.'].join(' '));\n        }\n        convertedValue = {\n          stringValue: '[Circular]'\n        };\n      } else {\n        convertedValue = {\n          structValue: this.convert(value)\n        };\n      }\n    } else {\n      if (!this.stringify) {\n        throw new Error('Value of type ' + typeof value + ' not recognized.');\n      }\n      convertedValue = {\n        stringValue: String(value)\n      };\n    }\n    return convertedValue;\n  }\n}\nexports.ObjectToStructConverter = ObjectToStructConverter;\n/**\n * Condense a protobuf Struct into an object of only its values.\n *\n * @private\n *\n * @param {object} struct - A protobuf Struct message.\n * @return {object} - The simplified object.\n *\n * @example\n * ```\n * GrpcService.structToObj_({\n *   fields: {\n *     name: {\n *       kind: 'stringValue',\n *       stringValue: 'Stephen'\n *     }\n *   }\n * });\n * // {\n * //   name: 'Stephen'\n * // }\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction structToObj(struct) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const convertedObject = {};\n  for (const prop in struct.fields) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (struct.fields.hasOwnProperty(prop)) {\n      const value = struct.fields[prop];\n      convertedObject[prop] = decodeValue(value);\n    }\n  }\n  return convertedObject;\n}\nexports.structToObj = structToObj;\n/**\n * Decode a protobuf Struct's value.\n *\n * @param {object} value - A Struct's Field message.\n * @return {*} - The decoded value.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction decodeValue(value) {\n  switch (value.kind) {\n    case 'structValue':\n      {\n        return structToObj(value.structValue);\n      }\n    case 'nullValue':\n      {\n        return null;\n      }\n    case 'listValue':\n      {\n        return value.listValue.values.map(decodeValue);\n      }\n    default:\n      {\n        return value[value.kind];\n      }\n  }\n}\nexports.decodeValue = decodeValue;\n/**\n * zuluToDateObj RFC3339 \"Zulu\" timestamp into a format that can be parsed to\n * a JS Date Object.\n * @param zuluTime\n */\nfunction zuluToDateObj(zuluTime) {\n  var _a;\n  const ms = Date.parse(zuluTime.split(/[.,Z]/)[0] + 'Z');\n  const reNano = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.(\\d{0,9})Z$/;\n  const nanoSecs = (_a = zuluTime.match(reNano)) === null || _a === void 0 ? void 0 : _a[1];\n  return {\n    seconds: ms ? Math.floor(ms / 1000) : 0,\n    nanos: nanoSecs ? Number(nanoSecs.padEnd(9, '0')) : 0\n  };\n}\nexports.zuluToDateObj = zuluToDateObj;","map":{"version":3,"names":["objToStruct","obj","options","ObjectToStructConverter","convert","exports","constructor","seenObjects","Set","removeCircular","stringify","convertedObject","fields","add","prop","Object","prototype","hasOwnProperty","call","value","undefined","encodeValue_","delete","convertedValue","nullValue","numberValue","stringValue","boolValue","Buffer","isBuffer","blobValue","Array","isArray","listValue","values","map","bind","toString","has","Error","join","structValue","String","structToObj","struct","decodeValue","kind","zuluToDateObj","zuluTime","ms","Date","parse","split","reNano","nanoSecs","_a","match","seconds","Math","floor","nanos","Number","padEnd"],"sources":["../../../src/utils/common.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}