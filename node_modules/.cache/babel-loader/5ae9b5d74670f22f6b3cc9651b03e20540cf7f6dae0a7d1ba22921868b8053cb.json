{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Entry = exports.TRACE_SAMPLED_KEY = exports.TRACE_KEY = exports.SPAN_ID_KEY = exports.SOURCE_LOCATION_KEY = exports.OPERATION_KEY = exports.LABELS_KEY = exports.INSERT_ID_KEY = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst EventId = require('eventid');\nconst extend = require(\"extend\");\nconst common_1 = require(\"./utils/common\");\nconst http_request_1 = require(\"./utils/http-request\");\nconst context_1 = require(\"./utils/context\");\nconst eventId = new EventId();\nexports.INSERT_ID_KEY = 'logging.googleapis.com/insertId';\nexports.LABELS_KEY = 'logging.googleapis.com/labels';\nexports.OPERATION_KEY = 'logging.googleapis.com/operation';\nexports.SOURCE_LOCATION_KEY = 'logging.googleapis.com/sourceLocation';\nexports.SPAN_ID_KEY = 'logging.googleapis.com/spanId';\nexports.TRACE_KEY = 'logging.googleapis.com/trace';\nexports.TRACE_SAMPLED_KEY = 'logging.googleapis.com/trace_sampled';\n/**\n * Create an entry object to define new data to insert into a meta.\n *\n * Note, {@link https://cloud.google.com/logging/quotas|Cloud Logging Quotas and limits}\n * dictates that the maximum log entry size, including all\n * {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry|LogEntry Resource properties},\n * cannot exceed approximately 256 KB.\n *\n * See {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry|LogEntry JSON representation}\n *\n * @class\n *\n * @param {?object} [metadata] See a\n *     [LogEntry\n * Resource](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry).\n * @param {object|string} data The data to use as the value for this log\n *     entry.\n *\n *     If providing an object, these value types are supported:\n *     - `String`\n *     - `Number`\n *     - `Boolean`\n *     - `Buffer`\n *     - `Object`\n *     - `Array`\n *\n *     Any other types are stringified with `String(value)`.\n *\n * @example\n * ```\n * const {Logging} = require('@google-cloud/logging');\n * const logging = new Logging();\n * const syslog = logging.log('syslog');\n *\n * const metadata = {\n *   resource: {\n *     type: 'gce_instance',\n *     labels: {\n *       zone: 'global',\n *       instance_id: '3'\n *     }\n *   }\n * };\n *\n * const entry = syslog.entry(metadata, {\n *   delegate: 'my_username'\n * });\n *\n * syslog.alert(entry, (err, apiResponse) => {\n *   if (!err) {\n *     // Log entry inserted successfully.\n *   }\n * });\n *\n * //-\n * // You will also receive `Entry` objects when using\n * // Logging#getEntries() and Log#getEntries().\n * //-\n * logging.getEntries((err, entries) => {\n *   if (!err) {\n *     // entries[0].data = The data value from the log entry.\n *   }\n * });\n * ```\n */\nclass Entry {\n  constructor(metadata, data) {\n    /**\n     * @name Entry#metadata\n     * @type {object}\n     * @property {Date} timestamp\n     * @property {number} insertId\n     */\n    this.metadata = extend({\n      timestamp: new Date()\n    }, metadata);\n    // JavaScript date has a very coarse granularity (millisecond), which makes\n    // it quite likely that multiple log entries would have the same timestamp.\n    // The Logging API doesn't guarantee to preserve insertion order for entries\n    // with the same timestamp. The service does use `insertId` as a secondary\n    // ordering for entries with the same timestamp. `insertId` needs to be\n    // globally unique (within the project) however.\n    //\n    // We use a globally unique monotonically increasing EventId as the\n    // insertId.\n    this.metadata.insertId = this.metadata.insertId || eventId.new();\n    /**\n     * @name Entry#data\n     * @type {object}\n     */\n    this.data = data;\n  }\n  /**\n   * Serialize an entry to the format the API expects. Read more:\n   * https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\n   *\n   * @param {object} [options] Configuration object.\n   * @param {boolean} [options.removeCircular] Replace circular references in an\n   *     object with a string value, `[Circular]`.\n   * @param {string} [projectId] GCP Project ID.\n   */\n  toJSON(options = {}, projectId = '') {\n    const entry = extend(true, {}, this.metadata);\n    // Format log message\n    if (Object.prototype.toString.call(this.data) === '[object Object]') {\n      entry.jsonPayload = common_1.objToStruct(this.data, {\n        removeCircular: !!options.removeCircular,\n        stringify: true\n      });\n    } else if (typeof this.data === 'string') {\n      entry.textPayload = this.data;\n    }\n    // Format log timestamp\n    if (entry.timestamp instanceof Date) {\n      const seconds = entry.timestamp.getTime() / 1000;\n      const secondsRounded = Math.floor(seconds);\n      entry.timestamp = {\n        seconds: secondsRounded,\n        nanos: Math.floor((seconds - secondsRounded) * 1e9)\n      };\n    } else if (typeof entry.timestamp === 'string') {\n      entry.timestamp = common_1.zuluToDateObj(entry.timestamp);\n    }\n    // Format httpRequest\n    const req = this.metadata.httpRequest;\n    if (http_request_1.isRawHttpRequest(req)) {\n      entry.httpRequest = http_request_1.makeHttpRequestData(req);\n      // Format trace and span\n      const traceContext = this.extractTraceFromHeaders(projectId);\n      if (traceContext) {\n        if (!this.metadata.trace && traceContext.trace) entry.trace = traceContext.trace;\n        if (!this.metadata.spanId && traceContext.spanId) entry.spanId = traceContext.spanId;\n        if (this.metadata.traceSampled === undefined) entry.traceSampled = traceContext.traceSampled;\n      }\n    }\n    return entry;\n  }\n  /**\n   * Serialize an entry to a standard format for any transports, e.g. agents.\n   * Read more: https://cloud.google.com/logging/docs/structured-logging\n   */\n  toStructuredJSON(projectId = '') {\n    const meta = this.metadata;\n    // Mask out the keys that need to be renamed.\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      textPayload,\n      jsonPayload,\n      insertId,\n      trace,\n      spanId,\n      traceSampled,\n      operation,\n      sourceLocation,\n      labels,\n      ...validKeys\n    } = meta;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const entry = extend(true, {}, validKeys);\n    // Re-map keys names.\n    entry[exports.LABELS_KEY] = meta.labels ? Object.assign({}, meta.labels) : undefined;\n    entry[exports.INSERT_ID_KEY] = meta.insertId || undefined;\n    entry[exports.TRACE_KEY] = meta.trace || undefined;\n    entry[exports.SPAN_ID_KEY] = meta.spanId || undefined;\n    entry[exports.TRACE_SAMPLED_KEY] = 'traceSampled' in meta && meta.traceSampled !== null ? meta.traceSampled : undefined;\n    // Format log payload.\n    entry.message = meta.textPayload || meta.jsonPayload || meta.protoPayload || undefined;\n    entry.message = this.data || entry.message;\n    // Format timestamp\n    if (meta.timestamp instanceof Date) {\n      entry.timestamp = meta.timestamp.toISOString();\n    }\n    // Format httprequest\n    const req = meta.httpRequest;\n    if (http_request_1.isRawHttpRequest(req)) {\n      entry.httpRequest = http_request_1.makeHttpRequestData(req);\n      // Detected trace context from headers if applicable.\n      const traceContext = this.extractTraceFromHeaders(projectId);\n      if (traceContext) {\n        if (!entry[exports.TRACE_KEY] && traceContext.trace) entry[exports.TRACE_KEY] = traceContext.trace;\n        if (!entry[exports.SPAN_ID_KEY] && traceContext.spanId) entry[exports.SPAN_ID_KEY] = traceContext.spanId;\n        if (entry[exports.TRACE_SAMPLED_KEY] === undefined) entry[exports.TRACE_SAMPLED_KEY] = traceContext.traceSampled;\n      }\n    }\n    return entry;\n  }\n  /**\n   * extractTraceFromHeaders extracts trace and span information from raw HTTP\n   * request headers only.\n   * @private\n   */\n  extractTraceFromHeaders(projectId) {\n    const rawReq = this.metadata.httpRequest;\n    if (rawReq && 'headers' in rawReq) {\n      return context_1.getOrInjectContext(rawReq, projectId, false);\n    }\n    return null;\n  }\n  /**\n   * Create an Entry object from an API response, such as `entries:list`.\n   *\n   * @private\n   *\n   * @param {object} entry An API representation of an entry. See a\n   *     {@link https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry| LogEntry}.\n   * @returns {Entry}\n   */\n  static fromApiResponse_(entry) {\n    let data = entry[entry.payload];\n    if (entry.payload === 'jsonPayload') {\n      data = common_1.structToObj(data);\n    }\n    const serializedEntry = new Entry(entry, data);\n    if (entry.timestamp) {\n      let ms = Number(entry.timestamp.seconds) * 1000;\n      ms += Number(entry.timestamp.nanos) / 1e6;\n      serializedEntry.metadata.timestamp = new Date(ms);\n    }\n    return serializedEntry;\n  }\n}\nexports.Entry = Entry;","map":{"version":3,"names":["EventId","require","extend","common_1","http_request_1","context_1","eventId","exports","INSERT_ID_KEY","LABELS_KEY","OPERATION_KEY","SOURCE_LOCATION_KEY","SPAN_ID_KEY","TRACE_KEY","TRACE_SAMPLED_KEY","Entry","constructor","metadata","data","timestamp","Date","insertId","new","toJSON","options","projectId","entry","Object","prototype","toString","call","jsonPayload","objToStruct","removeCircular","stringify","textPayload","seconds","getTime","secondsRounded","Math","floor","nanos","zuluToDateObj","req","httpRequest","isRawHttpRequest","makeHttpRequestData","traceContext","extractTraceFromHeaders","trace","spanId","traceSampled","undefined","toStructuredJSON","meta","operation","sourceLocation","labels","validKeys","assign","message","protoPayload","toISOString","rawReq","getOrInjectContext","fromApiResponse_","payload","structToObj","serializedEntry","ms","Number"],"sources":["../../src/entry.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAAC,MAAA,GAAAD,OAAA;AAEA,MAAAE,QAAA,GAAAF,OAAA;AACA,MAAAG,cAAA,GAAAH,OAAA;AAMA,MAAAI,SAAA,GAAAJ,OAAA;AAEA,MAAMK,OAAO,GAAG,IAAIN,OAAO,EAAE;AAEhBO,OAAA,CAAAC,aAAa,GAAG,iCAAiC;AACjDD,OAAA,CAAAE,UAAU,GAAG,+BAA+B;AAC5CF,OAAA,CAAAG,aAAa,GAAG,kCAAkC;AAClDH,OAAA,CAAAI,mBAAmB,GAAG,uCAAuC;AAC7DJ,OAAA,CAAAK,WAAW,GAAG,+BAA+B;AAC7CL,OAAA,CAAAM,SAAS,GAAG,8BAA8B;AAC1CN,OAAA,CAAAO,iBAAiB,GAAG,sCAAsC;AAyDvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA,MAAMC,KAAK;EAGTC,YAAYC,QAAmB,EAAEC,IAAW;IAC1C;;;;;;IAMA,IAAI,CAACD,QAAQ,GAAGf,MAAM,CACpB;MACEiB,SAAS,EAAE,IAAIC,IAAI;KACpB,EACDH,QAAQ,CACT;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACA,QAAQ,CAACI,QAAQ,GAAG,IAAI,CAACJ,QAAQ,CAACI,QAAQ,IAAIf,OAAO,CAACgB,GAAG,EAAE;IAChE;;;;IAIA,IAAI,CAACJ,IAAI,GAAGA,IAAI;EAClB;EAEA;;;;;;;;;EASAK,MAAMA,CAACC,OAAA,GAAyB,EAAE,EAAEC,SAAS,GAAG,EAAE;IAChD,MAAMC,KAAK,GAAcxB,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAACe,QAAQ,CAAoB;IAC3E;IACA,IAAIU,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACZ,IAAI,CAAC,KAAK,iBAAiB,EAAE;MACnEQ,KAAK,CAACK,WAAW,GAAG5B,QAAA,CAAA6B,WAAW,CAAC,IAAI,CAACd,IAAI,EAAE;QACzCe,cAAc,EAAE,CAAC,CAACT,OAAO,CAACS,cAAc;QACxCC,SAAS,EAAE;OACZ,CAAC;KACH,MAAM,IAAI,OAAO,IAAI,CAAChB,IAAI,KAAK,QAAQ,EAAE;MACxCQ,KAAK,CAACS,WAAW,GAAG,IAAI,CAACjB,IAAI;;IAE/B;IACA,IAAIQ,KAAK,CAACP,SAAS,YAAYC,IAAI,EAAE;MACnC,MAAMgB,OAAO,GAAGV,KAAK,CAACP,SAAS,CAACkB,OAAO,EAAE,GAAG,IAAI;MAChD,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;MAC1CV,KAAK,CAACP,SAAS,GAAG;QAChBiB,OAAO,EAAEE,cAAc;QACvBG,KAAK,EAAEF,IAAI,CAACC,KAAK,CAAC,CAACJ,OAAO,GAAGE,cAAc,IAAI,GAAG;OACnD;KACF,MAAM,IAAI,OAAOZ,KAAK,CAACP,SAAS,KAAK,QAAQ,EAAE;MAC9CO,KAAK,CAACP,SAAS,GAAGhB,QAAA,CAAAuC,aAAa,CAAChB,KAAK,CAACP,SAAS,CAAC;;IAElD;IACA,MAAMwB,GAAG,GAAG,IAAI,CAAC1B,QAAQ,CAAC2B,WAAW;IACrC,IAAIxC,cAAA,CAAAyC,gBAAgB,CAACF,GAAG,CAAC,EAAE;MACzBjB,KAAK,CAACkB,WAAW,GAAGxC,cAAA,CAAA0C,mBAAmB,CAACH,GAAG,CAAC;MAC5C;MACA,MAAMI,YAAY,GAAG,IAAI,CAACC,uBAAuB,CAACvB,SAAS,CAAC;MAC5D,IAAIsB,YAAY,EAAE;QAChB,IAAI,CAAC,IAAI,CAAC9B,QAAQ,CAACgC,KAAK,IAAIF,YAAY,CAACE,KAAK,EAC5CvB,KAAK,CAACuB,KAAK,GAAGF,YAAY,CAACE,KAAK;QAClC,IAAI,CAAC,IAAI,CAAChC,QAAQ,CAACiC,MAAM,IAAIH,YAAY,CAACG,MAAM,EAC9CxB,KAAK,CAACwB,MAAM,GAAGH,YAAY,CAACG,MAAM;QACpC,IAAI,IAAI,CAACjC,QAAQ,CAACkC,YAAY,KAAKC,SAAS,EAC1C1B,KAAK,CAACyB,YAAY,GAAGJ,YAAY,CAACI,YAAY;;;IAGpD,OAAOzB,KAAK;EACd;EAEA;;;;EAIA2B,gBAAgBA,CAAC5B,SAAS,GAAG,EAAE;IAC7B,MAAM6B,IAAI,GAAG,IAAI,CAACrC,QAAQ;IAC1B;IACA;IACA,MAAM;MACJkB,WAAW;MACXJ,WAAW;MACXV,QAAQ;MACR4B,KAAK;MACLC,MAAM;MACNC,YAAY;MACZI,SAAS;MACTC,cAAc;MACdC,MAAM;MACN,GAAGC;IAAS,CACb,GAAGJ,IAAI;IACR;IACA,MAAM5B,KAAK,GAAmBxB,MAAM,CAAC,IAAI,EAAE,EAAE,EAAEwD,SAAS,CAAO;IAC/D;IACAhC,KAAK,CAACnB,OAAA,CAAAE,UAAU,CAAC,GAAG6C,IAAI,CAACG,MAAM,GAC3B9B,MAAM,CAACgC,MAAM,CAAC,EAAE,EAAEL,IAAI,CAACG,MAAM,CAAC,GAC9BL,SAAS;IACb1B,KAAK,CAACnB,OAAA,CAAAC,aAAa,CAAC,GAAG8C,IAAI,CAACjC,QAAQ,IAAI+B,SAAS;IACjD1B,KAAK,CAACnB,OAAA,CAAAM,SAAS,CAAC,GAAGyC,IAAI,CAACL,KAAK,IAAIG,SAAS;IAC1C1B,KAAK,CAACnB,OAAA,CAAAK,WAAW,CAAC,GAAG0C,IAAI,CAACJ,MAAM,IAAIE,SAAS;IAC7C1B,KAAK,CAACnB,OAAA,CAAAO,iBAAiB,CAAC,GACtB,cAAc,IAAIwC,IAAI,IAAIA,IAAI,CAACH,YAAY,KAAK,IAAI,GAChDG,IAAI,CAACH,YAAY,GACjBC,SAAS;IACf;IACA1B,KAAK,CAACkC,OAAO,GACXN,IAAI,CAACnB,WAAW,IAAImB,IAAI,CAACvB,WAAW,IAAIuB,IAAI,CAACO,YAAY,IAAIT,SAAS;IACxE1B,KAAK,CAACkC,OAAO,GAAG,IAAI,CAAC1C,IAAI,IAAIQ,KAAK,CAACkC,OAAO;IAC1C;IACA,IAAIN,IAAI,CAACnC,SAAS,YAAYC,IAAI,EAAE;MAClCM,KAAK,CAACP,SAAS,GAAGmC,IAAI,CAACnC,SAAS,CAAC2C,WAAW,EAAE;;IAEhD;IACA,MAAMnB,GAAG,GAAGW,IAAI,CAACV,WAAW;IAC5B,IAAIxC,cAAA,CAAAyC,gBAAgB,CAACF,GAAG,CAAC,EAAE;MACzBjB,KAAK,CAACkB,WAAW,GAAGxC,cAAA,CAAA0C,mBAAmB,CAACH,GAAG,CAAC;MAC5C;MACA,MAAMI,YAAY,GAAG,IAAI,CAACC,uBAAuB,CAACvB,SAAS,CAAC;MAC5D,IAAIsB,YAAY,EAAE;QAChB,IAAI,CAACrB,KAAK,CAACnB,OAAA,CAAAM,SAAS,CAAC,IAAIkC,YAAY,CAACE,KAAK,EACzCvB,KAAK,CAACnB,OAAA,CAAAM,SAAS,CAAC,GAAGkC,YAAY,CAACE,KAAK;QACvC,IAAI,CAACvB,KAAK,CAACnB,OAAA,CAAAK,WAAW,CAAC,IAAImC,YAAY,CAACG,MAAM,EAC5CxB,KAAK,CAACnB,OAAA,CAAAK,WAAW,CAAC,GAAGmC,YAAY,CAACG,MAAM;QAC1C,IAAIxB,KAAK,CAACnB,OAAA,CAAAO,iBAAiB,CAAC,KAAKsC,SAAS,EACxC1B,KAAK,CAACnB,OAAA,CAAAO,iBAAiB,CAAC,GAAGiC,YAAY,CAACI,YAAY;;;IAG1D,OAAOzB,KAAK;EACd;EAEA;;;;;EAKQsB,uBAAuBA,CAACvB,SAAiB;IAC/C,MAAMsC,MAAM,GAAG,IAAI,CAAC9C,QAAQ,CAAC2B,WAAW;IACxC,IAAImB,MAAM,IAAI,SAAS,IAAIA,MAAM,EAAE;MACjC,OAAO1D,SAAA,CAAA2D,kBAAkB,CAACD,MAAM,EAAEtC,SAAS,EAAE,KAAK,CAAC;;IAErD,OAAO,IAAI;EACb;EAEA;;;;;;;;;EASA,OAAOwC,gBAAgBA,CAACvC,KAAiC;IACvD,IAAIR,IAAI,GAAGQ,KAAK,CAACA,KAAK,CAACwC,OAAQ,CAAC;IAChC,IAAIxC,KAAK,CAACwC,OAAO,KAAK,aAAa,EAAE;MACnChD,IAAI,GAAGf,QAAA,CAAAgE,WAAW,CAACjD,IAAI,CAAC;;IAE1B,MAAMkD,eAAe,GAAG,IAAIrD,KAAK,CAACW,KAAK,EAAER,IAAI,CAAC;IAC9C,IAAIQ,KAAK,CAACP,SAAS,EAAE;MACnB,IAAIkD,EAAE,GAAGC,MAAM,CAAC5C,KAAK,CAACP,SAAS,CAACiB,OAAO,CAAC,GAAG,IAAI;MAC/CiC,EAAE,IAAIC,MAAM,CAAC5C,KAAK,CAACP,SAAS,CAACsB,KAAK,CAAC,GAAG,GAAG;MACzC2B,eAAe,CAACnD,QAAQ,CAACE,SAAS,GAAG,IAAIC,IAAI,CAACiD,EAAE,CAAC;;IAEnD,OAAOD,eAAe;EACxB;;AAQM7D,OAAA,CAAAQ,KAAA,GAAAA,KAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}