{"ast":null,"code":"\"use strict\";\n\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggingCommon = exports.getCurrentTraceFromAgent = exports.LOGGING_SAMPLED_KEY = exports.LOGGING_SPAN_KEY = exports.LOGGING_TRACE_KEY = void 0;\nconst util = require(\"util\");\nconst logging_1 = require(\"@google-cloud/logging\");\nconst mapValues = require(\"lodash.mapvalues\");\n// Map of npm output levels to Cloud Logging levels.\nconst NPM_LEVEL_NAME_TO_CODE = {\n  error: 3,\n  warn: 4,\n  info: 6,\n  verbose: 7,\n  debug: 7,\n  silly: 7\n};\n// Map of Cloud Logging levels.\nconst CLOUD_LOGGING_LEVEL_CODE_TO_NAME = {\n  0: 'emergency',\n  1: 'alert',\n  2: 'critical',\n  3: 'error',\n  4: 'warning',\n  5: 'notice',\n  6: 'info',\n  7: 'debug'\n};\n/*!\n * Log entry data key to allow users to indicate a trace for the request.\n */\nexports.LOGGING_TRACE_KEY = 'logging.googleapis.com/trace';\n/*!\n * Log entry data key to allow users to indicate a spanId for the request.\n */\nexports.LOGGING_SPAN_KEY = 'logging.googleapis.com/spanId';\n/*!\n * Log entry data key to allow users to indicate a traceSampled flag for the request.\n */\nexports.LOGGING_SAMPLED_KEY = 'logging.googleapis.com/trace_sampled';\n/*!\n * Gets the current fully qualified trace ID when available from the\n * @google-cloud/trace-agent library in the LogEntry.trace field format of:\n * \"projects/[PROJECT-ID]/traces/[TRACE-ID]\".\n */\nfunction getCurrentTraceFromAgent() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const agent = global._google_trace_agent;\n  if (!agent || !agent.getCurrentContextId || !agent.getWriterProjectId) {\n    return null;\n  }\n  const traceId = agent.getCurrentContextId();\n  if (!traceId) {\n    return null;\n  }\n  const traceProjectId = agent.getWriterProjectId();\n  if (!traceProjectId) {\n    return null;\n  }\n  return `projects/${traceProjectId}/traces/${traceId}`;\n}\nexports.getCurrentTraceFromAgent = getCurrentTraceFromAgent;\nclass LoggingCommon {\n  constructor(options) {\n    var _a;\n    options = Object.assign({\n      scopes: ['https://www.googleapis.com/auth/logging.write']\n    }, options);\n    this.logName = options.logName || 'winston_log';\n    this.inspectMetadata = options.inspectMetadata === true;\n    this.levels = options.levels || NPM_LEVEL_NAME_TO_CODE;\n    this.redirectToStdout = (_a = options.redirectToStdout) !== null && _a !== void 0 ? _a : false;\n    if (!this.redirectToStdout) {\n      this.cloudLog = new logging_1.Logging(options).log(this.logName, {\n        removeCircular: true,\n        // See: https://cloud.google.com/logging/quotas, a log size of\n        // 250,000 has been chosen to keep us comfortably within the\n        // 256,000 limit.\n        maxEntrySize: options.maxEntrySize || 250000\n      });\n    } else {\n      this.cloudLog = new logging_1.Logging(options).logSync(this.logName);\n    }\n    this.resource = options.resource;\n    this.serviceContext = options.serviceContext;\n    this.prefix = options.prefix;\n    this.labels = options.labels;\n    this.defaultCallback = options.defaultCallback;\n  }\n  log(level, message, metadata, callback) {\n    metadata = metadata || {};\n    message = message || '';\n    const hasMetadata = Object.keys(metadata).length;\n    if (this.levels[level] === undefined) {\n      throw new Error('Unknown log level: ' + level);\n    }\n    const levelCode = this.levels[level];\n    const cloudLevel = CLOUD_LOGGING_LEVEL_CODE_TO_NAME[levelCode];\n    const data = {};\n    // Cloud Logs Viewer picks up the summary line from the `message`\n    // property of the jsonPayload.\n    // https://cloud.google.com/logging/docs/view/logs_viewer_v2#expanding.\n    //\n    // For error messages at severity 'error' and higher,\n    // Error Reporting will pick up error messages if the full stack trace is\n    // included in the textPayload or the message property of the jsonPayload.\n    // https://cloud.google.com/error-reporting/docs/formatting-error-messages\n    // We prefer to format messages as jsonPayload (by putting it as a message\n    // property on an object) as that works and is accepted by Error Reporting\n    // in far more resource types.\n    //\n    if (metadata.stack) {\n      message += (message ? ' ' : '') + metadata.stack;\n      data.serviceContext = this.serviceContext;\n    }\n    data.message = this.prefix ? `[${this.prefix}] ` : '';\n    data.message += message;\n    const entryMetadata = {\n      resource: this.resource\n    };\n    // If the metadata contains a logName property, promote it to the entry\n    // metadata.\n    if (metadata.logName) {\n      entryMetadata.logName = metadata.logName;\n    }\n    // If the metadata contains a httpRequest property, promote it to the\n    // entry metadata. This allows Cloud Logging to use request log formatting.\n    // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#HttpRequest\n    // Note that the httpRequest field must properly validate as HttpRequest\n    // proto message, or the log entry would be rejected by the API. We no do\n    // validation here.\n    if (metadata.httpRequest) {\n      entryMetadata.httpRequest = metadata.httpRequest;\n    }\n    // If the metadata contains a timestamp property, promote it to the entry\n    // metadata. As Winston 3 buffers logs when a transport (such as this one)\n    // invokes its log callback asynchronously, a timestamp assigned at log time\n    // is more accurate than one assigned in a transport.\n    if (metadata.timestamp instanceof Date) {\n      entryMetadata.timestamp = metadata.timestamp;\n    }\n    // If the metadata contains a labels property, promote it to the entry\n    // metadata.\n    // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\n    if (this.labels || metadata.labels) {\n      entryMetadata.labels = !this.labels ? metadata.labels : Object.assign({}, this.labels, metadata.labels);\n    }\n    const trace = metadata[exports.LOGGING_TRACE_KEY] || getCurrentTraceFromAgent();\n    if (trace) {\n      entryMetadata.trace = trace;\n    }\n    const spanId = metadata[exports.LOGGING_SPAN_KEY];\n    if (spanId) {\n      entryMetadata.spanId = spanId;\n    }\n    if (exports.LOGGING_SAMPLED_KEY in metadata) {\n      entryMetadata.traceSampled = metadata[exports.LOGGING_SAMPLED_KEY] === '1';\n    }\n    // we have tests that assert that metadata is always passed.\n    // not sure if its correct but for now we always set it even if it has\n    // nothing in it\n    data.metadata = this.inspectMetadata ? mapValues(metadata, util.inspect) : metadata;\n    if (hasMetadata) {\n      // clean entryMetadata props\n      delete data.metadata[exports.LOGGING_TRACE_KEY];\n      delete data.metadata[exports.LOGGING_SPAN_KEY];\n      delete data.metadata[exports.LOGGING_SAMPLED_KEY];\n      delete data.metadata.httpRequest;\n      delete data.metadata.labels;\n      delete data.metadata.timestamp;\n      delete data.metadata.logName;\n    }\n    const entry = this.entry(entryMetadata, data);\n    // Make sure that both callbacks are called in case if provided\n    const newCallback = (err, apiResponse) => {\n      if (callback) {\n        callback(err, apiResponse);\n      }\n      if (this.defaultCallback) {\n        this.defaultCallback(err, apiResponse);\n      }\n    };\n    this.cloudLog[cloudLevel](entry, newCallback);\n    // The LogSync class does not supports callback. However Writable class always\n    // provides onwrite() callback which needs to be called after each log is written,\n    // so the stream would remove writing state. Since this.defaultCallback can also be set, we\n    // should call it explicitly as well.\n    if (this.redirectToStdout) {\n      newCallback(null, undefined);\n    }\n  }\n  entry(metadata, data) {\n    if (this.redirectToStdout) {\n      return this.cloudLog.entry(metadata, data);\n    }\n    return this.cloudLog.entry(metadata, data);\n  }\n}\nexports.LoggingCommon = LoggingCommon;\n// LOGGING_TRACE_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/trace\nLoggingCommon.LOGGING_TRACE_KEY = exports.LOGGING_TRACE_KEY;\n// LOGGING_TRACE_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/spanId\nLoggingCommon.LOGGING_SPAN_KEY = exports.LOGGING_SPAN_KEY;","map":{"version":3,"names":["Object","defineProperty","exports","value","LoggingCommon","getCurrentTraceFromAgent","LOGGING_SAMPLED_KEY","LOGGING_SPAN_KEY","LOGGING_TRACE_KEY","util","require","logging_1","mapValues","NPM_LEVEL_NAME_TO_CODE","error","warn","info","verbose","debug","silly","CLOUD_LOGGING_LEVEL_CODE_TO_NAME","agent","global","_google_trace_agent","getCurrentContextId","getWriterProjectId","traceId","traceProjectId","constructor","options","_a","assign","scopes","logName","inspectMetadata","levels","redirectToStdout","cloudLog","Logging","log","removeCircular","maxEntrySize","logSync","resource","serviceContext","prefix","labels","defaultCallback","level","message","metadata","callback","hasMetadata","keys","length","undefined","Error","levelCode","cloudLevel","data","stack","entryMetadata","httpRequest","timestamp","Date","trace","spanId","traceSampled","inspect","entry","newCallback","err","apiResponse"],"sources":["/Users/rhysgregory/node_modules/@google-cloud/logging-winston/build/src/common.js"],"sourcesContent":["\"use strict\";\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingCommon = exports.getCurrentTraceFromAgent = exports.LOGGING_SAMPLED_KEY = exports.LOGGING_SPAN_KEY = exports.LOGGING_TRACE_KEY = void 0;\nconst util = require(\"util\");\nconst logging_1 = require(\"@google-cloud/logging\");\nconst mapValues = require(\"lodash.mapvalues\");\n// Map of npm output levels to Cloud Logging levels.\nconst NPM_LEVEL_NAME_TO_CODE = {\n    error: 3,\n    warn: 4,\n    info: 6,\n    verbose: 7,\n    debug: 7,\n    silly: 7,\n};\n// Map of Cloud Logging levels.\nconst CLOUD_LOGGING_LEVEL_CODE_TO_NAME = {\n    0: 'emergency',\n    1: 'alert',\n    2: 'critical',\n    3: 'error',\n    4: 'warning',\n    5: 'notice',\n    6: 'info',\n    7: 'debug',\n};\n/*!\n * Log entry data key to allow users to indicate a trace for the request.\n */\nexports.LOGGING_TRACE_KEY = 'logging.googleapis.com/trace';\n/*!\n * Log entry data key to allow users to indicate a spanId for the request.\n */\nexports.LOGGING_SPAN_KEY = 'logging.googleapis.com/spanId';\n/*!\n * Log entry data key to allow users to indicate a traceSampled flag for the request.\n */\nexports.LOGGING_SAMPLED_KEY = 'logging.googleapis.com/trace_sampled';\n/*!\n * Gets the current fully qualified trace ID when available from the\n * @google-cloud/trace-agent library in the LogEntry.trace field format of:\n * \"projects/[PROJECT-ID]/traces/[TRACE-ID]\".\n */\nfunction getCurrentTraceFromAgent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const agent = global._google_trace_agent;\n    if (!agent || !agent.getCurrentContextId || !agent.getWriterProjectId) {\n        return null;\n    }\n    const traceId = agent.getCurrentContextId();\n    if (!traceId) {\n        return null;\n    }\n    const traceProjectId = agent.getWriterProjectId();\n    if (!traceProjectId) {\n        return null;\n    }\n    return `projects/${traceProjectId}/traces/${traceId}`;\n}\nexports.getCurrentTraceFromAgent = getCurrentTraceFromAgent;\nclass LoggingCommon {\n    constructor(options) {\n        var _a;\n        options = Object.assign({\n            scopes: ['https://www.googleapis.com/auth/logging.write'],\n        }, options);\n        this.logName = options.logName || 'winston_log';\n        this.inspectMetadata = options.inspectMetadata === true;\n        this.levels = options.levels || NPM_LEVEL_NAME_TO_CODE;\n        this.redirectToStdout = (_a = options.redirectToStdout) !== null && _a !== void 0 ? _a : false;\n        if (!this.redirectToStdout) {\n            this.cloudLog = new logging_1.Logging(options).log(this.logName, {\n                removeCircular: true,\n                // See: https://cloud.google.com/logging/quotas, a log size of\n                // 250,000 has been chosen to keep us comfortably within the\n                // 256,000 limit.\n                maxEntrySize: options.maxEntrySize || 250000,\n            });\n        }\n        else {\n            this.cloudLog = new logging_1.Logging(options).logSync(this.logName);\n        }\n        this.resource = options.resource;\n        this.serviceContext = options.serviceContext;\n        this.prefix = options.prefix;\n        this.labels = options.labels;\n        this.defaultCallback = options.defaultCallback;\n    }\n    log(level, message, metadata, callback) {\n        metadata = metadata || {};\n        message = message || '';\n        const hasMetadata = Object.keys(metadata).length;\n        if (this.levels[level] === undefined) {\n            throw new Error('Unknown log level: ' + level);\n        }\n        const levelCode = this.levels[level];\n        const cloudLevel = CLOUD_LOGGING_LEVEL_CODE_TO_NAME[levelCode];\n        const data = {};\n        // Cloud Logs Viewer picks up the summary line from the `message`\n        // property of the jsonPayload.\n        // https://cloud.google.com/logging/docs/view/logs_viewer_v2#expanding.\n        //\n        // For error messages at severity 'error' and higher,\n        // Error Reporting will pick up error messages if the full stack trace is\n        // included in the textPayload or the message property of the jsonPayload.\n        // https://cloud.google.com/error-reporting/docs/formatting-error-messages\n        // We prefer to format messages as jsonPayload (by putting it as a message\n        // property on an object) as that works and is accepted by Error Reporting\n        // in far more resource types.\n        //\n        if (metadata.stack) {\n            message += (message ? ' ' : '') + metadata.stack;\n            data.serviceContext = this.serviceContext;\n        }\n        data.message = this.prefix ? `[${this.prefix}] ` : '';\n        data.message += message;\n        const entryMetadata = {\n            resource: this.resource,\n        };\n        // If the metadata contains a logName property, promote it to the entry\n        // metadata.\n        if (metadata.logName) {\n            entryMetadata.logName = metadata.logName;\n        }\n        // If the metadata contains a httpRequest property, promote it to the\n        // entry metadata. This allows Cloud Logging to use request log formatting.\n        // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#HttpRequest\n        // Note that the httpRequest field must properly validate as HttpRequest\n        // proto message, or the log entry would be rejected by the API. We no do\n        // validation here.\n        if (metadata.httpRequest) {\n            entryMetadata.httpRequest = metadata.httpRequest;\n        }\n        // If the metadata contains a timestamp property, promote it to the entry\n        // metadata. As Winston 3 buffers logs when a transport (such as this one)\n        // invokes its log callback asynchronously, a timestamp assigned at log time\n        // is more accurate than one assigned in a transport.\n        if (metadata.timestamp instanceof Date) {\n            entryMetadata.timestamp = metadata.timestamp;\n        }\n        // If the metadata contains a labels property, promote it to the entry\n        // metadata.\n        // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\n        if (this.labels || metadata.labels) {\n            entryMetadata.labels = !this.labels\n                ? metadata.labels\n                : Object.assign({}, this.labels, metadata.labels);\n        }\n        const trace = metadata[exports.LOGGING_TRACE_KEY] || getCurrentTraceFromAgent();\n        if (trace) {\n            entryMetadata.trace = trace;\n        }\n        const spanId = metadata[exports.LOGGING_SPAN_KEY];\n        if (spanId) {\n            entryMetadata.spanId = spanId;\n        }\n        if (exports.LOGGING_SAMPLED_KEY in metadata) {\n            entryMetadata.traceSampled = metadata[exports.LOGGING_SAMPLED_KEY] === '1';\n        }\n        // we have tests that assert that metadata is always passed.\n        // not sure if its correct but for now we always set it even if it has\n        // nothing in it\n        data.metadata = this.inspectMetadata\n            ? mapValues(metadata, util.inspect)\n            : metadata;\n        if (hasMetadata) {\n            // clean entryMetadata props\n            delete data.metadata[exports.LOGGING_TRACE_KEY];\n            delete data.metadata[exports.LOGGING_SPAN_KEY];\n            delete data.metadata[exports.LOGGING_SAMPLED_KEY];\n            delete data.metadata.httpRequest;\n            delete data.metadata.labels;\n            delete data.metadata.timestamp;\n            delete data.metadata.logName;\n        }\n        const entry = this.entry(entryMetadata, data);\n        // Make sure that both callbacks are called in case if provided\n        const newCallback = (err, apiResponse) => {\n            if (callback) {\n                callback(err, apiResponse);\n            }\n            if (this.defaultCallback) {\n                this.defaultCallback(err, apiResponse);\n            }\n        };\n        this.cloudLog[cloudLevel](entry, newCallback);\n        // The LogSync class does not supports callback. However Writable class always\n        // provides onwrite() callback which needs to be called after each log is written,\n        // so the stream would remove writing state. Since this.defaultCallback can also be set, we\n        // should call it explicitly as well.\n        if (this.redirectToStdout) {\n            newCallback(null, undefined);\n        }\n    }\n    entry(metadata, data) {\n        if (this.redirectToStdout) {\n            return this.cloudLog.entry(metadata, data);\n        }\n        return this.cloudLog.entry(metadata, data);\n    }\n}\nexports.LoggingCommon = LoggingCommon;\n// LOGGING_TRACE_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/trace\nLoggingCommon.LOGGING_TRACE_KEY = exports.LOGGING_TRACE_KEY;\n// LOGGING_TRACE_KEY is Cloud Logging specific and has the format:\n// logging.googleapis.com/spanId\nLoggingCommon.LOGGING_SPAN_KEY = exports.LOGGING_SPAN_KEY;\n//# sourceMappingURL=common.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}